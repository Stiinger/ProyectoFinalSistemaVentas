@page "/EditProveedores"
@page "/EditProveedores/proveedorId={proveedorId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ProveedoresService proveedorService
@inject TiposContribuyenteService tipoContribuyenteService
@inject ContactosService contactoService
@inject NotificationService notificationService

<PageTitle>Editar Proveedor</PageTitle>
<RadzenNotification />
<EditForm Model="proveedor" OnValidSubmit="Modificar" FormName="EditarProveedores">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3><strong>Editar Proveedor</strong></h3>
			</div>
			@*Cuerpo*@
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-4">
						@*Proveedor Id*@
						<label class="form-label" for="proveedorId"><strong>ProveedorId</strong></label>
						<InputNumber id="proveedorId" class="form-control" @bind-Value="proveedor.ProveedorId" readonly></InputNumber>
					</div>
					<div class="col-4">
						@*FechaCreacion*@
						<label class="form-label" for="fecha"><strong>Fecha Creaci&oacute;n</strong></label>
						<InputDate id="fecha" class="form-control" @bind-Value="proveedor.FechaCreacion" readonly></InputDate>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-4">
						@*Nombre*@
						<label class="form-label" for="nombre"><strong>Nombre</strong></label>
						<InputText id="nombre" class="form-control" @bind-Value="proveedor.Encargado" placeholder="Ej: Juan Pérez"></InputText>
						<spam class="mensajeError">@mensajeNombre</spam>
						<ValidationMessage For="@(() => proveedor.Encargado)"></ValidationMessage>
					</div>
					<div class="col-4">
						@*Direccion*@
						<label class="form-label" for="direccion"><strong>Direcci&oacute;n</strong></label>
						<InputText id="direccion" class="form-control" @bind-Value="proveedor.Direccion" placeholder="Ej: Ave. Libertad #23"></InputText>
						<ValidationMessage For="@(() => proveedor.Direccion)"></ValidationMessage>
					</div>
					<div class="col-4">
						@*Ciudad*@
						<label class="form-label" for="ciudad"><strong>Ciudad</strong></label>
						<InputText id="ciudad" class="form-control" @bind-Value="proveedor.Ciudad" placeholder="Ej: San Francisco de Macorís"></InputText>
						<ValidationMessage For="@(() => proveedor.Ciudad)"></ValidationMessage>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-4">
						@*Email*@
						<label class="form-label" for="email"><strong>Email</strong></label>
						<InputText id="email" class="form-control" @bind-Value="proveedor.Email" placeholder="Ej: juanperez123@gmail.com"></InputText>
						<spam class="mensajeError">@mensajeEmail</spam>
						<ValidationMessage For="@(() => proveedor.Email)"></ValidationMessage>
					</div>
					<div class="col-4">
						@*Numero de Cuenta*@
						<label class="form-label" for="cuenta"><strong>N&uacute;mero de Cuenta</strong></label>
						<label>(Sin guiones)</label>
						<InputText id="cuenta" class="form-control" @bind-Value="proveedor.NumeroCuenta" placeholder="9123456789"></InputText>
						<spam class="mensajeError">@mensajeCuenta</spam>
						<ValidationMessage For="@(() => proveedor.NumeroCuenta)"></ValidationMessage>
					</div>
					<div class="col-4">
						@*Banco*@
						<label class="form-label" for="banco"><strong>Banco</strong></label>
						<InputText id="banco" class="form-control" @bind-Value="proveedor.Banco" placeholder="BHD"></InputText>
						<ValidationMessage For="@(() => proveedor.Banco)"></ValidationMessage>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-4">
						@*TipoContribuyente*@
						<label class="form-label" for="ipoContribuyente"><strong>Tipo de Contribuyente</strong></label>
						<InputSelect id="tipoContribuyente" class="form-select" @bind-Value="proveedor.TipoContribuyenteId">
							<option value="0">Elige una opci&oacute;n</option>
							@foreach (var tipo in tiposContribuyente)
							{
								<option value="@tipo.TipoContribuyenteId">@tipo.TipoContribuyente</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => proveedor.TipoContribuyenteId)"></ValidationMessage>
					</div>

					<div class="col-4">
						@*RNC*@
						<label class="form-label" for="rnc"><strong>RNC</strong></label>
						<label>(Sin guiones)</label>
						<InputText id="rnc" class="form-control" @bind-Value="proveedor.RNC" placeholder="40234573653"></InputText>
						<spam class="mensajeError">@mensajeRNC</spam>
						<ValidationMessage For="@(() => proveedor.RNC)"></ValidationMessage>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-12">
						@*Nota*@
						<label class="form-label" for="nota"><strong>Nota</strong></label>
						<label>(Opcional)</label>
						<InputTextArea id="nota" class="form-control" @bind-Value="proveedor.Nota" placeholder="Ingrese una nota"></InputTextArea>
						<ValidationMessage For="@(() => proveedor.Nota)"></ValidationMessage>
					</div>
				</div>
				@*ProveedoresDetalles*@
				<fieldset class="border-primmary border border-2">
					@*Body*@
					<div class="card-body">
						<section class="row mb-4">
							<h3><strong>Detalles</strong></h3>
							<div class="row align-content-center">
								@*Contacto*@
								<div class="col-4">
									<label class="form-label" for="Tipocontacto"><strong>Tipo de N&uacute;:</strong></label>
									<InputSelect id="Tipocontacto" class="form-select" @bind-Value="tipo">
										<option>Elige una opci&oacute;n</option>
										@foreach (var contacto in contactos)
										{
											<option value="@contacto.NumeroId">@contacto.TipoNumero</option>
										}
									</InputSelect>
								</div>
								@*Descripcion*@
								<div class="col-4">
									<label class="form-label" for="descripcion"><strong>N&uacute;mero:</strong></label>
									<label>(Sin guiones)</label>
									<InputText id="descripcion" class="form-control" @bind-Value="contacto" placeholder="Ingrese un número"></InputText>
								</div>
								@*Boton*@
								<div class="col-4 d-flex align-items-end">
									<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
								</div>
							</div>
						</section>
						<section>
							@if (proveedor.ProveedoresDetalle.Count > 0)
							{
								@*Table Detalles*@
								<table class="table table-bordered miTabla">
									<thead>
										<tr>
											<th>Tipo de Contacto</th>
											<th>Contacto</th>
											<th></th>
										</tr>
									</thead>
									<tbody>
										@foreach (var detalle in proveedor.ProveedoresDetalle)
										{
											@if (detalle.Eliminado == false)
											{
												<tr>
													<td>@ObtenerTipoContacto(detalle.ContactoId)</td>
													<td>@FormatPhoneNumber(detalle.Contacto)</td>
													<td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
												</tr>
											}
										}
									</tbody>
								</table>
								<p><strong>Total Números de Contactos: </strong>@proveedor.ProveedoresDetalle.Count</p>
							}
						</section>
					</div>
				</fieldset>
			</div>
			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Modificar</button>
			</div>
		</div>
	</div>

	<!-- Modal -->
	<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h1 class="modal-title fs-5" id="exampleModalLabel"><strong>Datos sin guardar</strong></h1>
				</div>
				<div class="modal-body">
					¿Estás seguro de que quieres salir sin guardar?
					<em>Si deseas salir pulsa "Salir"</em>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CerrarModal">Cerrar</button>
					<button type="button" class="btn btn-primary" @onclick="VolverAtras">Salir</button>
				</div>
			</div>
		</div>
	</div>

	@if (mostrarModal)
	{
		<script>
			var myModal = new bootstrap.Modal(document.getElementById('exampleModal'));
			myModal.show();
		</script>
	}

</EditForm>
@mensaje

@code {
	[Parameter]
	public int proveedorId { get; set; }

	public Proveedores proveedor { get; set; } = new Proveedores();
	public List<TiposContribuyente> tiposContribuyente = new List<TiposContribuyente>();
	public List<Numeros> contactos = new List<Numeros>();

	public int tipo { get; set; } = 0;
	public string contacto { get; set; } = string.Empty;
	public string mensaje { get; set; } = string.Empty;

	public string mensajeNombre { get; set; } = string.Empty;
	public string mensajeEmail { get; set; } = string.Empty;
	public string mensajeRNC { get; set; } = string.Empty;
	public string mensajeCuenta { get; set; } = string.Empty;


	public bool mostrarModal { get; set; }

	public string nombreLast { get; set; } = string.Empty;
	public string direccionLast { get; set; } = string.Empty;
	public string ciudadLast { get; set; } = string.Empty;
	public string bancoLast { get; set; } = string.Empty;
	public string emailLast { get; set; } = string.Empty;
	public string rncLast { get; set; } = string.Empty;
	public string notaLast { get; set; } = string.Empty;
	public string numeroCuentaLast { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		tiposContribuyente = await tipoContribuyenteService.Listar(tc => tc.TipoContribuyenteId > 0);
		contactos = await contactoService.Listar(c => c.NumeroId > 0);
		proveedor = await proveedorService.BuscarId(proveedorId);

		nombreLast = proveedor.Encargado;
		direccionLast = proveedor.Direccion;
		ciudadLast = proveedor.Ciudad;
		emailLast = proveedor.Email;
		bancoLast = proveedor.Banco;
		rncLast = proveedor.RNC;
		notaLast = proveedor.Nota;
		numeroCuentaLast = proveedor.NumeroCuenta;
	}

	public async Task Modificar()
	{
		if (await ValidarProveedor())
		{
			if (String.IsNullOrEmpty(proveedor.Nota))
				proveedor.Nota = "----";

			var response = await proveedorService.Crear(proveedor);

			if (response)
			{
				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Success,
						Summary = "Éxito al modificar",
						Detail = "El proveedor se modificó con éxito",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);

				await Task.Delay(3000);
				VolverAtras();
			}
			else
			{
				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al modificar",
						Detail = "El proveedor no se pudo modificar correctamente",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);
			}
		}
		else
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al crear",
					Detail = "Algunos datos ya existen",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}

		StateHasChanged();
		await Task.Delay(4000);
		await LimpiarPantalla();
	}

	public async Task<bool> ValidarProveedor()
	{
		var validar = await proveedorService.Listar(p => p.Eliminado == false);
		var nombre = validar.FirstOrDefault(p => p.Encargado == proveedor.Encargado);
		var email = validar.FirstOrDefault(p => p.Email == proveedor.Email);
		var rnc = validar.FirstOrDefault(p => p.RNC == proveedor.RNC);
		var numeroCuenta = validar.FirstOrDefault(p => p.NumeroCuenta == proveedor.NumeroCuenta);

		bool nombreValido = true;
		bool emailValido = true;
		bool rncValido = true;
		bool numeroCuentaValido = true;

		if (nombre != null && nombre.Encargado != nombreLast)
		{
			nombreValido = false;
			mensajeNombre = "Ya existe un proveedor con este nombre";
		}

		if (email != null && email.Email != emailLast)
		{
			emailValido = false;
			mensajeEmail = "Ya existe un proveedor con este email";
		}

		if (rnc != null && rnc.RNC != rncLast)
		{
			rncValido = false;
			mensajeRNC = "Ya existe un proveedor con este número de RNC";
		}

		if (numeroCuenta != null && numeroCuenta.NumeroCuenta != numeroCuentaLast)
		{
			numeroCuentaValido = false;
			mensajeCuenta = "Ya existe un proveedor con este número de cuenta";
		}

		return nombreValido && emailValido && rncValido && numeroCuentaValido;
	}

	public async Task AgregarDetalle()
	{
		if (!String.IsNullOrEmpty(contacto) && tipo != 0)
		{
			if (await ValidarDetalle())
			{
				var nuevoDetalle = new ProveedoresDetalle { ContactoId = tipo, Contacto = contacto };
				proveedor.ProveedoresDetalle.Add(nuevoDetalle);

				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Success,
						Summary = "Éxito al agregar detalle",
						Detail = "Número agregado al detalle correctamente",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);

				await LimpiarPantalla();
			}
		}
		else
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "No pueden haber campos vacíos",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}
	}

	public string ObtenerTipoContacto(int id)
	{
		var dato = contactos.FirstOrDefault(c => c.NumeroId == id);

		return dato.TipoNumero;
	}

	public string FormatPhoneNumber(string phoneNumber)
	{
		return $"{phoneNumber.Substring(0, 3)}-{phoneNumber.Substring(3, 3)}-{phoneNumber.Substring(6)}";
	}

	public async Task<bool> ValidarDetalle()
	{
		var validar = await proveedorService.Listar(p => p.Eliminado == false);

		if (!contacto.All(char.IsDigit))
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "El número no debe contener letras o caracteres especiales",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			return false;
		}

		if (contacto.Length != 10)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "La longitud del número debe ser de 10 dígitos",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			return false;
		}

		foreach (var detalle in validar)
		{
			foreach (var contactos in detalle.ProveedoresDetalle)
			{
				if (contactos.Contacto == contacto)
				{
					var Mensaje = new NotificationMessage
						{
							Severity = NotificationSeverity.Error,
							Summary = "Error al agregar detalle",
							Detail = "Este número ya existe",
							Duration = 5_000
						};
					notificationService.Notify(Mensaje);
					return false;
				}
			}
		}

		foreach (var detalle in proveedor.ProveedoresDetalle)
		{
			if (detalle.Contacto == contacto && detalle.Eliminado == false)
			{
				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al agregar detalle",
						Detail = "Este número ya existe",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);
				return false;
			}
		}

		return true;
	}

	public async Task EliminarDetalle(ProveedoresDetalle detalle)
	{
		///Lo que se hace aqui es dejar de mostrar el detalle, pero no lo borramos de la base de datos
		detalle.Eliminado = true;

		var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Éxito al eleminar detalle",
				Detail = "Detalle eliminado  con éxito",
				Duration = 5_000
			};
		notificationService.Notify(Mensaje);
	}

	public async Task LimpiarPantalla()
	{
		mensaje = string.Empty;
		mensajeNombre = string.Empty;
		mensajeEmail = string.Empty;
		mensajeRNC = string.Empty;
		tipo = 0;
		contacto = string.Empty;
		StateHasChanged();
	}

	void Volver()
	{
		if (proveedor.Encargado != nombreLast || proveedor.Direccion != direccionLast
			|| proveedor.Ciudad != ciudadLast || proveedor.Email != emailLast
			|| proveedor.NumeroCuenta != numeroCuentaLast || proveedor.Banco != bancoLast
			|| proveedor.RNC != rncLast || proveedor.Nota != notaLast)
		{
			mostrarModal = true; // Mostrar el modal si la condición se cumple
		}
		else
			VolverAtras();
	}

	public void CerrarModal()
	{
		mostrarModal = false;
	}

	public void VolverAtras()
	{
		navigation.NavigateTo("/Proveedores");
	}
}