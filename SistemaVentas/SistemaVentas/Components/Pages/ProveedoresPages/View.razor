@page "/ViewProveedores"
@page "/ViewProveedores/proveedorId={proveedorId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ProveedoresService proveedorService
@inject TiposContribuyenteService tipoContribuyenteService
@inject ContactosService contactoService
@inject NotificationService notificationService

<PageTitle>Detalles de Proveedor</PageTitle>
<RadzenNotification/>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Detalles de Proveedor</strong></h3>
		</div>
		@*Cuerpo*@
		<div class="card-body">
			<div class="row">
				<div class="col-8">
					<div class="col-md-11">
						<h3 class="text-center"><strong>Datos del Proveedor</strong></h3>
						<div class="border-primmary border border-2 borde">
							<div class="card-body">
								<div class="row">
									@*Imagen*@
									<div class="col-2">
										<div class="text-center">
											<img src="Imagenes/mensajero.png" alt="Imagen" class="img-fluid img-thumbnail" style="width: 100px; height: auto;">
										</div>
									</div>
									@*Datos del proveedor*@
									<div class="col-9">
										<table class="table table-bordered">
											<tbody>
												<tr>
													<th>ProveedorId</th>
													<td>@proveedor.ProveedorId</td>
												</tr>
												<tr>
													<th>Fecha Creación</th>
													<td>@proveedor.FechaCreacion.ToShortDateString()</td>
												</tr>
												<tr>
													<th>Nombre</th>
													<td>@proveedor.Nombre</td>
												</tr>
												<tr>
													<th>Dirección</th>
													<td>@proveedor.Direccion</td>
												</tr>
												<tr>
													<th>Email</th>
													<td>@proveedor.Email</td>
												</tr>
												<tr>
													<th>TipoContribuyente</th>
													@* <td>@proveedor.TipoContribuyente</td> *@
												</tr>
												<tr>
													<th>RNC</th>
													<td>@FormatRNCNumber(proveedor.RNC)</td>
												</tr>
												<tr>
													<th>Nota</th>
													<td>@proveedor.Nota</td>
												</tr>
											</tbody>
										</table>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				@*Detalles del proveedor*@
				<div class="col-4">
					<h3 class="text-center"><strong>Contactos</strong></h3>
					<fieldset class="border-primmary border border-2 borde">
						<div class="card-body">
							<section>
								@if (proveedor.ProveedoresDetalle.Count > 0)
								{
									<table class="table table-bordered miTabla">
										<thead>
											<tr>
												<th>Tipo de Contacto</th>
												<th>N&uacute;mero de Contacto</th>
											</tr>
										</thead>
										<tbody>
											@foreach (var detalle in proveedor.ProveedoresDetalle)
											{
												<tr>
													<td>@ObtenerTipoContacto(detalle.ContactoId)</td>
													<td>@FormatPhoneNumber(detalle.Contacto)</td>
												</tr>
											}
										</tbody>
									</table>
									<p><strong>Total N&uacute;meros de Contactos: </strong>@proveedor.ProveedoresDetalle.Count</p>
								}
								else
								{
									<h4>Este proveedor no tiene contactos agregados</h4>
								}
							</section>
						</div>
					</fieldset>
				</div>
			</div>
		</div>
		@*Footer*@
		<div class="card-footer">
			<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
		</div>
	</div>
</div>

@mensaje

@code {
	[Parameter]
	public int proveedorId { get; set; }

	public Proveedores proveedor { get; set; } = new Proveedores();
	public List<TiposContribuyente> tiposContribuyente = new List<TiposContribuyente>();
	public List<Contactos> contactos = new List<Contactos>();
	public int tipo { get; set; }
	public string contacto { get; set; } = string.Empty;
	public string mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		tiposContribuyente = await tipoContribuyenteService.Listar(tc => tc.TipoContribuyenteId > 0);
		contactos = await contactoService.Listar(c => c.ContactoId > 0);
		proveedor = await proveedorService.BuscarId(proveedorId);

		// var Mensaje = new NotificationMessage
		// 	{
		// 		Severity = NotificationSeverity.Error,
		// 		Summary = "Error al guardar",
		// 		Detail = "Ha ocurrido un error",
		// 		Duration = 5_000
		// 	};
		// notificationService.Notify(Mensaje);

		// var Otro = new NotificationMessage
		// 	{
		// 		Severity = NotificationSeverity.Success,
		// 		Summary = "Guardo",
		// 		Detail = "Guardo correctamente",
		// 		Duration = 5_000
		// 	};
		// notificationService.Notify(Otro);
	}

	public string ObtenerTipoContacto(int id)
	{
		var dato = contactos.FirstOrDefault(c => c.ContactoId == id);

		return dato.Descripcion;
	}

	public string FormatPhoneNumber(string phoneNumber)
	{
		return $"{phoneNumber.Substring(0, 3)}-{phoneNumber.Substring(3, 3)}-{phoneNumber.Substring(6)}";
	}

	public string FormatRNCNumber(string rnc)
	{
		if(!string.IsNullOrEmpty(rnc))
			return $"{rnc.Substring(0, 3)}-{rnc.Substring(3, 7)}-{rnc.Substring(10)}";

		return rnc;
	}

	void Volver()
	{
		navigation.NavigateTo("/Proveedores");
	}
}
