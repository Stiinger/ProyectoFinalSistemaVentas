@page "/Proveedores"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ProveedoresService proveedorService
@inject TiposContribuyenteService tiposContribuyenteService
@inject CuentasPorPagarService cuentasPorPagarService
@inject ComprasService comprasService
@inject NotificationService notificationService

<PageTitle>Proveedores</PageTitle>
<RadzenNotification/>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Proveedores</strong></h3>
			<div class="d-flex align-items-start">
				<div class="px-2">
					<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
			</div>
		</div>
		@*Body*@
		<div class="card-body">
			@if (loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info">
					</div>
				</div>
			}
			else if (proveedores.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay proveedores creados</h1>
			}
			else
			{

				@*Fechas*@
				<div class="mb-3">
					<div class="row">
						<div class="col-3">
							<label class="form-label" for="desde"><strong>Desde:</strong></label>
							<InputDate id="desde" class="form-control" @bind-Value="desde"></InputDate>
						</div>
						<div class="col-3">
							<label class="form-label" for="hasta"><strong>Hasta:</strong></label>
							<InputDate id="hasta" class="form-control" @bind-Value="hasta"></InputDate>
						</div>
					</div>
				</div>

				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option>Elige una opci&oacute;n</option>
								<option value="id">Id</option>
								<option value="nombre">Nombre</option>
								<option value="direccion">Direcci&oacute;n</option>
								<option value="ciudad">Ciudad</option>
								<option value="rnc">RNC</option>
								<option value="contribuyente">Tipo de Contribuyente</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>ProveedorId</th>
							<th>Fecha de Creaci&oacute;n</th>
							<th>Nombre</th>
							<th>Direcci&oacute;n</th>
							<th>Ciudad</th>
							<th>RNC</th>
							<th>Tipo de Contribuyente</th>
							<th>Acciones</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var proveedor in proveedores)
						{
							<tr>
								<td>@proveedor.ProveedorId</td>
								<td>@proveedor.FechaCreacion.ToShortDateString()</td>
								<td>@proveedor.Nombre</td>
								<td>@proveedor.Direccion</td>
								<td>@proveedor.Ciudad</td>
								<td>@FormatRNCNumber(proveedor.RNC)</td>
								<td>@BuscarTipoContribuyente(proveedor.TipoContribuyenteId)</td>
								<td>
									<div class="btn-group" role="group">
										<button type="button" class="btn btn-outline-info" @onclick="()=> IrADetalles(proveedor.ProveedorId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Ver detalles">
											<i class="bi bi-eye"></i>
										</button>

										<button type="button" class="btn btn-outline-warning" @onclick="()=> IrAEditar(proveedor.ProveedorId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar">
											<i class="bi bi-pencil-square"></i>
										</button>
										<button type="button" class="btn btn-outline-danger" @onclick="()=> IrAEliminar(proveedor.ProveedorId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Eliminar">
											<i class="bi bi-trash3-fill"></i>
										</button>
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		<div class="card-footer">
			<p><strong>Total de Proveedores:</strong> @proveedores.Count</p>
		</div>
	</div>
</div>
@mensaje

@code {
	public List<Proveedores> proveedores = new List<Proveedores>();
	public List<TiposContribuyente> tiposContribuyente = new List<TiposContribuyente>();

	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public bool loading { get; set; } = true;
	public DateTime desde { get; set; } = DateTime.Today;
	public DateTime hasta { get; set; } = DateTime.Today;

	protected override async Task OnInitializedAsync()
	{
		// await Task.Delay(500);
		proveedores = await proveedorService.Listar(p => p.Eliminado == false);
		tiposContribuyente = await tiposContribuyenteService.Listar(tc => tc.TipoContribuyenteId > 0);

		loading = false;

		if (proveedores.Count == 0)
			StateHasChanged();
	}

	public async Task Buscar()
	{
		if (desde > hasta)
		{
			var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "Error al filtrar",
					Detail = "La fecha inicial no puede ser mayor a la fecha final",
				Duration = 5_000
			};
			notificationService.Notify(Mensaje);

			return;
		}

		else if (filtro == null)
		{
			var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "Error al filtrar",
					Detail = "Debe elegir un método parar filtrar",
				Duration = 5_000
			};
			notificationService.Notify(Mensaje);

			return;
		}

		else if (valorFiltro == null)
		{
			var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "Error al filtrar",
					Detail = "Debe ingresar un dato",
				Duration = 5_000
			};
			notificationService.Notify(Mensaje);

			return;
		}

		List<Proveedores> listaFiltro = new List<Proveedores>();

		switch (filtro)
		{
			case "id":
				if (int.TryParse(valorFiltro, out int id))
				{
					var resultadoId = proveedores.FirstOrDefault(p => p.ProveedorId == id);
					if (resultadoId != null &&
						(resultadoId.FechaCreacion >= desde && resultadoId.FechaCreacion <= hasta))
					{
						proveedores.Clear();
						proveedores.Add(resultadoId);
						VerificarMensajeFiltro(true);
					}
					else
						VerificarMensajeFiltro(false);
				}
				else
				{
					var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al filtrar",
							Detail = "El valor ingresado para ProveedorId no es válido",
						Duration = 5_000
					};
					notificationService.Notify(Mensaje);
					return;
				}
				break;

			case "nombre":
				var resultadoNombre = proveedores
				.FirstOrDefault(p => p.Nombre.ToLower().Contains(valorFiltro.ToLower()));

				if (resultadoNombre != null &&
					(resultadoNombre.FechaCreacion >= desde && resultadoNombre.FechaCreacion <= hasta))
				{
					proveedores.Clear();
					proveedores.Add(resultadoNombre);
					VerificarMensajeFiltro(true);
				}
				else
					VerificarMensajeFiltro(false);
				break;

			case "direccion":
				var resultadoDireccion = proveedores
				.Where(p => p.Direccion.ToLower().Contains(valorFiltro.ToLower())).ToList();

				if (resultadoDireccion != null)
				{
					foreach (var result in resultadoDireccion)
					{
						if (result.FechaCreacion >= desde && result.FechaCreacion <= hasta)
							listaFiltro.Add(result);
					}

					if (listaFiltro.Count > 0)
					{
						proveedores = listaFiltro;
						VerificarMensajeFiltro(true);
					}
					else
						VerificarMensajeFiltro(false);
				}
				break;

			case "ciudad":
				var resultadoCiudad = proveedores
				.Where(p => p.Ciudad.ToLower().Contains(valorFiltro.ToLower())).ToList();

				if (resultadoCiudad != null)
				{
					foreach (var result in resultadoCiudad)
					{
						if (result.FechaCreacion >= desde && result.FechaCreacion <= hasta)
							listaFiltro.Add(result);
					}

					if (listaFiltro.Count > 0)
					{
						proveedores = listaFiltro;
						VerificarMensajeFiltro(true);
					}
					else
						VerificarMensajeFiltro(false);
				}
				break;

			case "rnc":
				var resultadoRNC = proveedores.Where(p => p.RNC.Contains(valorFiltro)).ToList();

				if (resultadoRNC != null)
				{
					foreach (var result in resultadoRNC)
					{
						if (result.FechaCreacion >= desde && result.FechaCreacion <= hasta)
							listaFiltro.Add(result);
					}

					if (listaFiltro.Count > 0)
					{
						proveedores = listaFiltro;
						VerificarMensajeFiltro(true);
					}
					else
						VerificarMensajeFiltro(false);
				}
				break;

			case "contribuyente":
				var contribuyentes = tiposContribuyente
				.FirstOrDefault(tc => tc.Descripcion.ToLower().Contains(valorFiltro.ToLower()));

				if(contribuyentes != null)
				{
					var resultadoProveedor = 
					proveedores.Where
					(p => p.TipoContribuyenteId == contribuyentes.TipoContribuyenteId)
					.ToList();

					foreach(var result in resultadoProveedor)
					{
						if (result.FechaCreacion >= desde && result.FechaCreacion <= hasta)
							listaFiltro.Add(result);
					}

					if (listaFiltro.Count > 0)
					{
						proveedores = listaFiltro;
						VerificarMensajeFiltro(true);
					}
					else
						VerificarMensajeFiltro(false);
				}
				else
					VerificarMensajeFiltro(false);

				break;
		}
	}

	public void VerificarMensajeFiltro(bool valor)
	{
		if (valor)
		{
			var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Éxito al filtrar",
				Detail = "Se encontraron resultados",
				Duration = 5_000
			};
			notificationService.Notify(Mensaje);
		}
		else
		{
			var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "Error al filtrar",
				Detail = "No se encontraron resultados",
				Duration = 5_000
			};
			notificationService.Notify(Mensaje);
		}
	}

	public string FormatRNCNumber(string rnc)
	{
		return $"{rnc.Substring(0, 3)}-{rnc.Substring(3, 7)}-{rnc.Substring(10)}";
	}

	public string BuscarTipoContribuyente(int id)
	{
		var contribuyente = tiposContribuyente.FirstOrDefault(p => p.TipoContribuyenteId == id);
		return contribuyente.Descripcion;
	}

	public async Task Restablecer()
	{
		proveedores = await proveedorService.Listar(p => p.Eliminado == false);

		var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Éxito al restablecer",
				Detail = "Los datos fueron restablecidos con éxito",
				Duration = 5_000
			};
		notificationService.Notify(Mensaje);
	}

	public async Task LimpiarPantalla()
	{
		await Task.Delay(2000);
		mensaje = string.Empty;
	}

	void Volver()
	{
		navigation.NavigateTo("/");
	}

	void IrACrear()
	{
		navigation.NavigateTo("/CreateProveedores");
	}

	void IrADetalles(int id)
	{
		navigation.NavigateTo($"/ViewProveedores/proveedorId={id}");
	}
	void IrAEditar(int id)
	{
		navigation.NavigateTo($"/EditProveedores/proveedorId={id}");
	}
	void IrAEliminar(int id)
	{
		navigation.NavigateTo($"/DeleteProveedores/proveedorId={id}");
	}
}