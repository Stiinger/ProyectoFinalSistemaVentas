@page "/AbonarCuentasPorCobrar"
@page "/AbonarCuentasPorCobrar/cuentaPorCobrarId={cuentaPorCobrarId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject VentasService ventasService
@inject ClientesService clientesService
@inject CuentasPorCobrarService cuentasPorCobrarService
@inject NotificationService notificationService

<PageTitle>Abonar Cuenta por Cobrar</PageTitle>
<RadzenNotification/>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Abonar Cuenta por Cobrar</strong></h3>
			<div class="d-flex align-items-start">
				@* <div class="px-2">
				<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div> *@
				@* <button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button> *@
			</div>
		</div>
		@*Body*@
		<div class="card-body">
			<div class="row mb-3">
				<div class="col-4">
					@*Fecha de Venta*@
					<label class="form-label" for="fechaVenta"><strong>Fecha de Venta</strong></label>
					<InputDate id="fechaVenta" class="form-control" @bind-Value="venta.FechaCreacion" readonly></InputDate>
				</div>
				<div class="col-4">
					@*Empleado Responsable*@
					<label class="form-label" for="responsable"><strong>Empleado Responsable</strong></label>
					<InputText id="responsable" class="form-control" @bind-Value="venta.EmpleadoResponsable" readonly></InputText>
				</div>
			</div>
			<div class="row mb-3">
				<div class="col-3">
					@*Proveedor*@
					<label class="form-label" for="proveedor"><strong>Cliente</strong></label
					<InputText id="Proveedor" class="form-control" @bind-Value="cliente" readonly></InputText>
				</div>
				<div class="col-3">
					@*Deuda Inicial*@
					<label class="form-label" for="inicial"><strong>Deuda Inicial</strong></label>
					<InputNumber id="inicial" class="form-control" @bind-Value="venta.TotalNeto" readonly></InputNumber>
				</div>
				<div class="col-3">
					@*Deuda Pendiente*@
					<label class="form-label" for="pendiente"><strong>Deuda Pendiente</strong></label>
					<InputNumber id="pendiente" class="form-control" @bind-Value="deuda" readonly></InputNumber>
				</div>
				<div class="col-3">
					@*Cantidad Producto*@
					<label class="form-label" for="cantidad"><strong>Cantidad Productos</strong></label>
					<InputNumber id="cantidad" class="form-control" @bind-Value="cantidad" readonly></InputNumber>
				</div>
			</div>

			@*Detalle*@
			<fieldset class="border-primmary border border-2">
				@*Body*@
				<div class="card-body">
					<section class="row mb-4">
						<h3><strong>Detalles</strong></h3>
						<div class="row align-content-center">
							@*Concepto*@
							<div class="col-4">
								<label class="form-label" for="Concepto"><strong>Concepto</strong></label>
								<InputText id="concepto" class="form-control" @bind-Value="concepto"></InputText>
							</div>
							@*Abono*@
							<div class="col-4">
								<label class="form-label" for="abono"><strong>Abono</strong></label>
								<InputNumber id="abono" class="form-control" @bind-Value="abono"></InputNumber>
							</div>
							@*Boton*@
							<div class="col-4 d-flex align-items-end">
								<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
							</div>
						</div>
					</section>
					<section>
						@if (cuentaPorCobrar.CuentasPorCobrarDetalle.Count > 0)
						{
							@*Table Detalles*@
							<table class="table table-bordered miTabla">
								<thead>
									<tr>
										<th>Fecha de pago</th>
										<th>Concepto</th>
										<th>Abono</th>
										<th></th>
									</tr>
								</thead>
								<tbody>
									@foreach (var detalle in cuentaPorCobrar.CuentasPorCobrarDetalle)
									{
										<tr>
											<td>@detalle.FechaPago.ToShortDateString()</td>
											<td>@detalle.Concepto</td>
											<td>@detalle.Abono.ToString("N2")</td>
											<td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
										</tr>
									}
								</tbody>
							</table>
							<p><strong>Total de Abonos: </strong>@cuentaPorCobrar.CuentasPorCobrarDetalle.Count</p>
						}
					</section>
				</div>
			</fieldset>
		</div>
		<div class="card-footer d-flex justify-content-center">
			<div class="px-2">
					<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success" @onclick="Guardar"><i class="bi bi-floppy-fill" /> Guardar</button>
		</div>
	</div>
</div>
@mensaje

@code {
	[Parameter]
	public int cuentaPorCobrarId { get; set; }
	public List<Ventas> ventas = new List<Ventas>();
	public List<Clientes> clientes = new List<Clientes>();
	public Ventas venta { get; set; } = new Ventas();
	public CuentasPorCobrar cuentaPorCobrar { get; set; } = new CuentasPorCobrar();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public bool loading { get; set; } = true;

	public string cliente { get; set; }
	public decimal deuda { get; set; }
	public int cantidad { get; set; }

	public string concepto { get; set; }
	public decimal abono { get; set; }

	protected override async Task OnInitializedAsync()
	{
		// await Task.Delay(500);
		ventas = await ventasService.Listar(c => c.Eliminado == false);
		clientes = await clientesService.Listar(p => p.Eliminado == false);

		cuentaPorCobrar = await cuentasPorCobrarService.BuscarId(cuentaPorCobrarId);
		venta = ventas.FirstOrDefault(c => c.VentaId == cuentaPorCobrar.VentaId);
		cantidad = venta.VentasDetalle.Count();
		deuda = venta.Deuda - cuentaPorCobrar.CuentasPorCobrarDetalle.Sum(d => d.Abono);

		cliente = BuscarCliente(venta.ClienteId);

		loading = false;

		if (ventas.Count == 0)
			StateHasChanged();
	}

	public async Task Guardar()
	{
		if (deuda == 0)
		{
			cuentaPorCobrar.Estado = "Pagada";
			venta.Estado = "Pagada";
			await ventasService.Guardar(venta);
		}

		var response = await cuentasPorCobrarService.Crear(cuentaPorCobrar);

		if(response)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Éxito al guardar",
					Detail = "El pago se ha guardado con éxito",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			await Task.Delay(3000);
			Volver();
		}
		else
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Error al guardar",
					Detail = "No se pudo guardar el pago correctamente",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}

	}

	public string BuscarCliente(int id)
	{
		var cliente = clientes.FirstOrDefault(p => p.ClienteId == id);

		if (cliente != null)
		{
			return cliente.Nombre;
		}
		else
		{
			return "Nombre de cliente no encontrado";
		}
	}

	public async Task AgregarDetalle()
	{
		if (!String.IsNullOrEmpty(concepto) && abono != 0)
		{
			if (await ValidarDetalle())
			{
				var nuevoDetalle = new CuentasPorCobrarDetalle 
				{ FechaPago = DateTime.Today, Concepto = concepto, Abono = abono };

				cuentaPorCobrar.CuentasPorCobrarDetalle.Add(nuevoDetalle);
				deuda = venta.Deuda - cuentaPorCobrar.CuentasPorCobrarDetalle.Sum(p => p.Abono);
				cuentaPorCobrar.DeudaRestante = deuda;

				var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Éxito al agregar detalle",
					Detail = "Abono agregado al detalle correctamente",
					Duration = 5_000
				};
				notificationService.Notify(Mensaje);

				await LimpiarPantalla();
			}
		}
		else
		{
			var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "Error al agregar detalle",
				Detail = "No pueden haber campos vacíos",
				Duration = 5_000
			};
			notificationService.Notify(Mensaje);
		}
	}

	public async Task<bool> ValidarDetalle()
	{
		var validarConcepto = cuentaPorCobrar.CuentasPorCobrarDetalle
			.FirstOrDefault(d => d.Concepto == concepto);

		if(validarConcepto != null)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "Este concepto ya existe en el detalle",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		if(abono <= 0)
		{
			var Mensaje1 = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "El abono no puede ser 0",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje1);
			return false;
		}

		if(abono > deuda)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "El abono no puede ser mayor a la deuda",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		return true;
	}

	public async Task EliminarDetalle(CuentasPorCobrarDetalle detalle)
	{
		cuentaPorCobrar.CuentasPorCobrarDetalle.Remove(detalle);
		deuda = venta.Deuda - cuentaPorCobrar.CuentasPorCobrarDetalle.Sum(p => p.Abono);
		cuentaPorCobrar.DeudaRestante = deuda;

		var Mensaje = new NotificationMessage
		{
			Severity = NotificationSeverity.Success,
			Summary = "Éxito al eleminar detalle",
			Detail = "Detalle eliminado con éxito",
			Duration = 5_000
		};
		notificationService.Notify(Mensaje);
	}

	public async Task LimpiarPantalla()
	{
		concepto = string.Empty;	
		abono = 0;
	}

	void Volver()
	{
		navigation.NavigateTo("/MenuPrincipal");
	}
}