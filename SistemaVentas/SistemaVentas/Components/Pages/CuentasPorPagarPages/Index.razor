@page "/CuentasPorPagar"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ComprasService comprasService
@inject ProveedoresService proveedoresService

<PageTitle>Cuentas por Pagar</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Cuentas por Pagar</strong></h3>
			<div class="d-flex align-items-start">
				@* <div class="px-2">
					<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div> *@
				<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				@* <button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button> *@
			</div>
		</div>
		@*Body*@
		<div class="card-body">
			@if (loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info">
					</div>
				</div>
			}
			else if (proveedores.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay cuentas por pagar pendientes</h1>
			}
			else
			{

				@*Fechas*@
				<div class="mb-3">
					<div class="row">
						<div class="col-3">
							<label class="form-label" for="desde"><strong>Desde:</strong></label>
							<InputDate id="desde" class="form-control" @bind-Value="desde"></InputDate>
						</div>
						<div class="col-3">
							<label class="form-label" for="hasta"><strong>Hasta:</strong></label>
							<InputDate id="hasta" class="form-control" @bind-Value="hasta"></InputDate>
						</div>
					</div>
				</div>

				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option>Elige una opci&oacute;n</option>
								<option value="id">Id</option>
								<option value="resposable">Responsable</option>
								<option value="proveedor">Proveedor</option>
								<option value="deuda">Deuda</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>CompraId</th>
							<th>Fecha de Compra</th>
							<th>Usuario Responsable</th>
							<th>Proveedor</th>
							<th>Cantidad Producto</th>
							<th>Deuda Inicial</th>
							<th>Deuda Pendiente</th>
							<th>Acciones</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var compra in compras)
						{
							<tr>
								<td>@compra.CompraId</td>
								<td>@compra.FechaCreacion.ToShortDateString()</td>
								<td>@compra.UsuarioResponsable</td>
								<td>@BuscarProveedor(compra.ProveedorId)</td>
								<td>@compra.ComprasDetalle.Count</td>
								<td>@compra.TotalNeto</td>
								<td>@CalcularDeudaPendiente(compra)</td>
								<td>
									<div class="btn-group" role="group">
										<button type="button" class="btn btn-outline-info" @onclick="()=> IrADetalles(compra.CompraId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Ver detalles">
											<i class="bi bi-eye"></i>
										</button>

										<button type="button" class="btn btn-outline-warning" @onclick="()=> IrAEditar(compra.CompraId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar">
											<i class="bi bi-pencil-square"></i>
										</button>
										<button type="button" class="btn btn-outline-danger" @onclick="()=> IrAEliminar(compra.CompraId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Eliminar">
											<i class="bi bi-trash3-fill"></i>
										</button>
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		<div class="card-footer">
			<p><strong>Total de Proveedores:</strong> @compras.Count</p>
		</div>
	</div>
</div>
@mensaje

@code {
	public List<Compras> compras = new List<Compras>();
	public List<Proveedores> proveedores = new List<Proveedores>();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public bool loading { get; set; } = true;
	public DateTime desde { get; set; } = DateTime.Today;
	public DateTime hasta { get; set; } = DateTime.Today;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		compras = await comprasService.Listar(c => c.Eliminado == false);
		proveedores = await proveedoresService.Listar(p => p.Eliminado == false);

		loading = false;

		if (compras.Count == 0)
			StateHasChanged();
	}

	public async Task Buscar()
	{
		if (desde > hasta)
		{
			mensaje = "La fecha inicial no puede ser mayor a la fecha final";
			StateHasChanged();
			await Task.Delay(3000);
			await LimpiarPantalla();
			return;
		}

		else if (filtro == null)
		{
			mensaje = "Debe elegir un método parar filtrar";
			StateHasChanged();
			await Task.Delay(3000);
			await LimpiarPantalla();
			return;
		}

		else if (valorFiltro == null)
		{
			mensaje = "Debe ingresar un dato";
			StateHasChanged();
			await Task.Delay(3000);
			await LimpiarPantalla();
			return;
		}

		List<Compras> listaFiltro = new List<Compras>();

		switch (filtro)
		{
			case "id":
				if (int.TryParse(valorFiltro, out int id))
				{
					var resultadoId = compras.FirstOrDefault(c => c.CompraId == id);
					if (resultadoId != null &&
						(resultadoId.FechaCreacion >= desde && resultadoId.FechaCreacion <= hasta))
					{
						compras.Clear();
						compras.Add(resultadoId);
					}
					else
						mensaje = "No se encontraron resultados";
				}
				else
				{
					mensaje = "El valor ingresado para TicketId no es válido";
					await Task.Delay(3000);
				}
				break;

			case "responsable":
				var resultadoResponsable = compras
				.FirstOrDefault(c => c.UsuarioResponsable.ToLower().Contains(valorFiltro.ToLower()));

				if (resultadoResponsable != null &&
					(resultadoResponsable.FechaCreacion >= desde && resultadoResponsable.FechaCreacion <= hasta))
				{
					compras.Clear();
					compras.Add(resultadoResponsable);
				}
				break;

			case "proveedor":
				var resultadoProveedor = proveedores
				.FirstOrDefault(c => c.Nombre.ToLower().Contains(valorFiltro.ToLower()));

				if (resultadoProveedor != null)
				{
					var proveedorId = resultadoProveedor.ProveedorId;
					var compra = compras.FirstOrDefault(c => c.ProveedorId == proveedorId);

					compras.Clear();
					compras.Add(compra);
				}
				break;

			case "deuda inicial":
				if (decimal.TryParse(valorFiltro, out decimal deudaTotal))
				{
					var resultadoDeuda = compras.Where(c => c.TotalNeto >= deudaTotal).ToList();

					foreach (var result in resultadoDeuda)
					{
						if (result.FechaCreacion >= desde && result.FechaCreacion <= hasta)
							listaFiltro.Add(result);
					}

					if (listaFiltro.Count > 0)
						compras = listaFiltro;

					else
						mensaje = "No se encontraron resultados";
				}
				break;
		}

		StateHasChanged();
		await LimpiarPantalla();
	}

	public string BuscarProveedor(int id)
	{
		var proveedor = proveedores.FirstOrDefault(c => c.ProveedorId == id);
		return proveedor.Nombre;
	}

	public decimal CalcularDeudaPendiente(Compras compra)
	{
		// var deudaTotal = compra.TotalNeto;
		// var sumaAbonos = compra.CuentasPorPagar.Sum(c => c.Abono);
		// return deudaTotal - sumaAbonos;
		return 0;
	}

	public async Task Restablecer()
	{
		proveedores = await proveedoresService.Listar(p => p.Eliminado == false);
	}

	public async Task LimpiarPantalla()
	{
		await Task.Delay(2000);
		mensaje = string.Empty;
	}

	void Volver()
	{
		navigation.NavigateTo("/");
	}

	void IrACrear()
	{
		navigation.NavigateTo("/CreateProveedores");
	}

	void IrADetalles(int id)
	{
		navigation.NavigateTo($"/ViewProveedores/proveedorId={id}");
	}
	void IrAEditar(int id)
	{
		navigation.NavigateTo($"/EditProveedores/proveedorId={id}");
	}
	void IrAEliminar(int id)
	{
		navigation.NavigateTo($"/DeleteProveedores/proveedorId={id}");
	}
}