@page "/AbonarCuentasPorPagar"
@page "/AbonarCuentasPorPagar/cuentaPorPagarId={cuentaPorPagarId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ComprasService comprasService
@inject ProveedoresService proveedoresService
@inject CuentasPorPagarService cuentasPorPagarService
@inject NotificationService notificationService

@attribute [Authorize(Roles = "Admin")]
<PageTitle>Abonar Cuenta por Pagar</PageTitle>
<RadzenNotification/>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Abonar Cuenta por Pagar</strong></h3>
			<div class="d-flex align-items-start">
				@* <div class="px-2">
				<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div> *@
				@* <button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button> *@
			</div>
		</div>
		@*Body*@
		<div class="card-body">
			<div class="row mb-3">
				<div class="col-4">
					@*Fecha de Compra*@
					<label class="form-label" for="fechaCompra"><strong>Fecha de Compra</strong></label>
					<InputDate id="fechaCompra" class="form-control" @bind-Value="compra.FechaCreacion" readonly></InputDate>
				</div>
				<div class="col-4">
					@*Usuario Responsable*@
					<label class="form-label" for="responsable"><strong>Usuario Responsable</strong></label>
					<InputText id="responsable" class="form-control" @bind-Value="compra.UsuarioResponsable" readonly></InputText>
				</div>
			</div>
			<div class="row mb-3">
				<div class="col-3">
					@*Proveedor*@
					<label class="form-label" for="proveedor"><strong>Proveedor</strong></label
					<InputText id="Proveedor" class="form-control" @bind-Value="proveedor" readonly></InputText>
				</div>
				<div class="col-3">
					@*Deuda Inicial*@
					<label class="form-label" for="inicial"><strong>Deuda Inicial</strong></label>
					<InputNumber id="inicial" class="form-control" @bind-Value="cuentaPorPagar.DeudaInicial" readonly></InputNumber>
				</div>
				<div class="col-3">
					@*Deuda Pendiente*@
					<label class="form-label" for="pendiente"><strong>Deuda Pendiente</strong></label>
					<InputNumber id="pendiente" class="form-control" @bind-Value="deuda" readonly></InputNumber>
				</div>
				<div class="col-3">
					@*Cantidad Producto*@
					<label class="form-label" for="cantidad"><strong>Cantidad Productos</strong></label>
					<InputNumber id="cantidad" class="form-control" @bind-Value="cantidad" readonly></InputNumber>
				</div>
			</div>

			@*Informacion de Pago*@
			<fieldset class="border-primmary border border-2 mb-3">
				@*Body*@
				<div class="card-body">
					<section class="row mb-4">
						<h3><strong>Informaci&oacute;n de Pago</strong></h3>
						@*Table Detalles*@
						<table class="table table-bordered miTabla">
							<thead>
								<tr>
									<th>Fecha de pago</th>
									<th>Porciento de Pago</th>
									<th>Monto a Pagar</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var detalle in cuentaPorPagar.PagoDetalle)
								{
									<tr>
										<td>@detalle.FechaPago.ToShortDateString()</td>
										<td>@detalle.porciento</td>
										<td>@detalle.MontoPago.ToString("N2")</td>
									</tr>
								}
								<tr>
									<td></td>
									<td><strong>Monto total</strong></td>
									<td>@cuentaPorPagar.PagoDetalle.Sum(d => d.MontoPago)</td>
								</tr>
							</tbody>
						</table>
						<p><strong>Total Pagos: </strong>@cuentaPorPagar.PagoDetalle.Count</p>
					</section>
				</div>
			</fieldset>

			@*Detalle*@
			<fieldset class="border-primmary border border-2">
				@*Body*@
				<div class="card-body">
					<section class="row mb-4">
						<h3><strong>Detalles</strong></h3>
						<div class="row align-content-center">
							@*Concepto*@
							<div class="col-4">
								<label class="form-label" for="Concepto"><strong>Concepto</strong></label>
								<InputText id="concepto" class="form-control" @bind-Value="concepto"></InputText>
							</div>
							@*Abono*@
							<div class="col-4">
								<label class="form-label" for="abono"><strong>Abono</strong></label>
								<InputNumber id="abono" class="form-control" @bind-Value="abono"></InputNumber>
							</div>
							@*Boton*@
							<div class="col-4 d-flex align-items-end">
								<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
							</div>
						</div>
					</section>
					<section>
						@if (cuentaPorPagar.CuentasPorPagarDetalle.Count > 0)
						{
							@*Table Detalles*@
							<table class="table table-bordered miTabla">
								<thead>
									<tr>
										<th>Fecha de pago</th>
										<th>Concepto</th>
										<th>Abono</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var detalle in cuentaPorPagar.CuentasPorPagarDetalle)
									{
										<tr>
											<td>@detalle.FechaPago.ToShortDateString()</td>
											<td>@detalle.Concepto</td>
											<td>@detalle.Abono.ToString("N2")</td>
										</tr>
									}
								</tbody>
							</table>
							<p><strong>Total de Abonos: </strong>@cuentaPorPagar.CuentasPorPagarDetalle.Count</p>
						}
					</section>
				</div>
			</fieldset>

		</div>
		<div class="card-footer d-flex justify-content-center">
			<div class="px-2">
					<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success" @onclick="Guardar"><i class="bi bi-floppy-fill" /> Guardar</button>
		</div>
	</div>
</div>

<!-- Modal -->
	<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h1 class="modal-title fs-5" id="exampleModalLabel"><strong>Datos sin guardar</strong></h1>
				</div>
				<div class="modal-body">
					¿Estás seguro de que quieres salir sin guardar?
					<em>Si deseas salir pulsa "Salir"</em>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CerrarModal">Cerrar</button>
					<button type="button" class="btn btn-primary" @onclick="VolverAtras">Salir</button>
				</div>
			</div>
		</div>
	</div>

	@if (mostrarModal)
	{
		<script>
			var myModal = new bootstrap.Modal(document.getElementById('exampleModal'));
			myModal.show();
		</script>
	}


@code {
	[Parameter]
	public int cuentaPorPagarId { get; set; }
	public List<Compras> compras = new List<Compras>();
	public List<Proveedores> proveedores = new List<Proveedores>();
	public Compras compra { get; set; } = new Compras();
	public CuentasPorPagar cuentaPorPagar { get; set; } = new CuentasPorPagar();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public bool loading { get; set; } = true;

	public string proveedor { get; set; }
	public decimal deuda { get; set; }
	public int cantidad { get; set; }

	public string concepto { get; set; }
	public decimal abono { get; set; }

	public bool mostrarModal { get; set; }
	public bool cuentaActualizada { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		// await Task.Delay(500);
		compras = await comprasService.Listar(c => c.Eliminado == false);
		proveedores = await proveedoresService.Listar(p => p.Eliminado == false);

		cuentaPorPagar = await cuentasPorPagarService.BuscarId(cuentaPorPagarId);
		compra = compras.FirstOrDefault(c => c.CompraId == cuentaPorPagar.CompraId);
		cantidad = compra.ComprasDetalle.Count();
		deuda = compra.Deuda - cuentaPorPagar.CuentasPorPagarDetalle.Sum(d => d.Abono);

		proveedor = BuscarProveedor(compra.ProveedorId);

		loading = false;

		if (compras.Count == 0)
			StateHasChanged();
	}

	public async Task Guardar()
	{
		if (deuda == 0)
		{
			cuentaPorPagar.Estado = "Pagada";
			compra.Estado = "Pagada";
			await comprasService.Crear(compra);
		}

		var response = await cuentasPorPagarService.Crear(cuentaPorPagar);

		if(response)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Éxito al guardar",
					Detail = "El pago se ha guardado con éxito",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			await Task.Delay(3000);
			VolverAtras();
		}
		else
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Error al guardar",
					Detail = "No se pudo guardar el pago correctamente",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}

	}

	public string BuscarProveedor(int id)
	{
		var proveedor = proveedores.FirstOrDefault(p => p.ProveedorId == id);

		if (proveedor != null)
		{
			return proveedor.Representante;
		}
		else
		{
			return "Nombre de proveedor no encontrado";
		}
	}

	public async Task AgregarDetalle()
	{
		if (!String.IsNullOrEmpty(concepto) && abono != 0)
		{
			if (await ValidarDetalle())
			{
				var nuevoDetalle = new CuentasPorPagarDetalle 
				{ FechaPago = DateTime.Today, Concepto = concepto, Abono = abono };

				cuentaPorPagar.CuentasPorPagarDetalle.Add(nuevoDetalle);
				deuda = compra.Deuda - cuentaPorPagar.CuentasPorPagarDetalle.Sum(p => p.Abono);
				cuentaPorPagar.DeudaRestante = deuda;

				cuentaActualizada = true;

				var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Éxito al agregar detalle",
					Detail = "Abono agregado al detalle correctamente",
					Duration = 5_000
				};
				notificationService.Notify(Mensaje);

				await LimpiarPantalla();

				if(cuentaPorPagar.CuentasPorPagarDetalle.Count == 3)
				{
					var mensajeSaldado = new NotificationMessage
					{
						Severity = NotificationSeverity.Success,
						Summary = "Cuenta Saldada",
						Detail = "Todos los pagos han sido realizados con éxito",
						Duration = 5_000
					};
					notificationService.Notify(mensajeSaldado);
				}
			}
		}
		else
		{
			var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "Error al agregar detalle",
				Detail = "No pueden haber campos vacíos",
				Duration = 5_000
			};
			notificationService.Notify(Mensaje);
		}
	}

	public async Task<bool> ValidarDetalle()
	{
		var validarConcepto = cuentaPorPagar.CuentasPorPagarDetalle
			.FirstOrDefault(d => d.Concepto == concepto);

		if(validarConcepto != null)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "Este concepto ya existe en el detalle",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}


		switch(cuentaPorPagar.CuentasPorPagarDetalle.Count)
		{
			case 0:
				var pago1 = cuentaPorPagar.PagoDetalle.FirstOrDefault().MontoPago;
				if(abono != pago1)
				{
					var mensajePago1 = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al agregar detalle",
						Detail = "El abono debe ser igual al monto a pagar en el primer pago",
						Duration = 5_000
					};
					notificationService.Notify(mensajePago1);
					return false;
				}
				break;

			case 1:
				var pago2 = cuentaPorPagar.PagoDetalle.Skip(1).FirstOrDefault().MontoPago;
				if(abono != pago2)
				{
					var mensajePago2 = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al agregar detalle",
						Detail = "El abono debe ser igual al monto a pagar en el segundo pago",
						Duration = 5_000
					};
					notificationService.Notify(mensajePago2);
					return false;
				}
				break;

			case 2:
				var pago3 = cuentaPorPagar.PagoDetalle.Skip(2).FirstOrDefault().MontoPago;
				if(abono != pago3)
				{
					var mensajePago3 = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al agregar detalle",
						Detail = "El abono debe ser igual al monto a pagar en el tercer pago",
						Duration = 5_000
					};
					notificationService.Notify(mensajePago3);
					return false;
				}
				break;

			default:
				var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "La cuenta está saldada",
					Duration = 5_000
				};
				notificationService.Notify(Mensaje);
				return false;
				break;
		}



		if(abono <= 0)
		{
			var Mensaje1 = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "El abono no puede ser 0",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje1);
			return false;
		}

		if(abono > deuda)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "El abono no puede ser mayor a la deuda",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		return true;
	}

	public async Task EliminarDetalle(CuentasPorPagarDetalle detalle)
	{
		concepto = detalle.Concepto;
		abono = detalle.Abono;
		// detalle.Eliminado = true;

		cuentaPorPagar.CuentasPorPagarDetalle.Remove(detalle);
		deuda = compra.Deuda - cuentaPorPagar.CuentasPorPagarDetalle.Sum(p => p.Abono);
		cuentaPorPagar.DeudaRestante = deuda;

		cuentaActualizada = true;

		var Mensaje = new NotificationMessage
		{
			Severity = NotificationSeverity.Success,
			Summary = "Éxito al eleminar detalle",
			Detail = "Detalle eliminado  con éxito",
			Duration = 5_000
		};
		notificationService.Notify(Mensaje);
	}

	public async Task LimpiarPantalla()
	{
		concepto = string.Empty;	
		abono = 0;
	}

	void Volver()
	{
		 // Verificar si hay cambios en la lista de CuentasPorPagarDetalle
		if (cuentaActualizada)
		{
			mostrarModal = true; // Mostrar el modal si la condición se cumple
		}
		else
			VolverAtras();
	}

	public void CerrarModal()
	{
		mostrarModal = false;
	}

	public void VolverAtras()
	{
		navigation.NavigateTo("/CuentasPorPagar");
	}
}