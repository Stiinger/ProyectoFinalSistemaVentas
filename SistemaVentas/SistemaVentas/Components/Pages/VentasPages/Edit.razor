@page "/EditVentas"
@page "/EditVentas/ventaId={ventaId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject VentasService ventasService
@inject ProductosService productosService
@inject NotificationService notificationService

<PageTitle>Editar Proveedor</PageTitle>
<RadzenNotification/>
<EditForm Model="venta" OnValidSubmit="Modificar" FormName="EditarVentas">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3 class="align-text-center"><strong>Crear Nuevo Producto</strong></h3>
			</div>
			@*Cuerpo*@
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-4">
						@*Venta Id*@
						<label class="form-label" for="ventaId"><strong>VentaId:</strong></label>
						<InputNumber id="ventaId" class="form-control" @bind-Value="venta.VentaId" readonly></InputNumber>
					</div>
					<div class="col-4">
						@*Fecha*@
						<label class="form-label" for="fecha"><strong>Fecha:</strong></label>
						<InputDate id="fecha" class="form-control" @bind-Value="venta.Fecha" readonly></InputDate>
						<ValidationMessage For="@(() => venta.Fecha)"></ValidationMessage>
					</div>
					<div class="col-2">
						@*SubTotal*@
						<label class="form-label" for="subtotal"><strong>SubTotal:</strong></label>
						<InputNumber id="subtotal" class="form-control" @bind-Value="venta.SubTotal" readonly></InputNumber>
						<ValidationMessage For="@(() => venta.SubTotal)"></ValidationMessage>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-3">
						@*Devolucion*@
						<label class="form-label" for="devolucion"><strong>Devoluci&oacute;n:</strong></label>
						<InputNumber id="devolucion" class="form-control" @bind-Value="venta.Devolucion" readonly></InputNumber>
						<ValidationMessage For="@(() => venta.Devolucion)"></ValidationMessage>
					</div>
					<div class="col-3">
						@*Pago*@
						<label class="form-label" for="pago"><strong>Pago:</strong></label>
						<InputNumber id="pago" class="form-control" @bind-Value="venta.Pago"></InputNumber>
						<ValidationMessage For="@(() => venta.Pago)"></ValidationMessage>
					</div>
				</div>
				@*ventasDetalles*@
				<fieldset class="border-primmary border border-2">
					@*Body*@
					<div class="card-body">
						<section class="row mb-4">
							<h3><strong>Agregar Productos</strong></h3>
							<div class="row align-content-center">
								@*Producto*@
								<div class="col-4">
									<label class="form-label" for="producto"><strong>Producto:</strong></label>
									<InputSelect id="producto" class="form-select" @bind-Value="productoSeleccionado">
										<option>Elija una opci&oacute;n</option>
										@foreach (var producto in listaProductos)
										{
											<option value="@producto.ProductoId">@producto.Nombre</option>
										}
									</InputSelect>
								</div>
								@*Cantidad*@
								<div class="col-2">
									<label class="form-label" for="cantidad"><strong>Cantidad:</strong></label>
									<InputNumber id="cantidad" class="form-control" @bind-Value="cantidad"></InputNumber>
								</div>
								@*Boton*@
								<div class="col-4 d-flex align-items-end">
									<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
								</div>
							</div>
						</section>
						<section>
							@if (venta.VentaDetalle.Count > 0)
							{
								@*Table Detalles*@
								<table class="table table-bordered miTabla">
									<thead>
										<tr>
											<th>Producto</th>
											<th>Cantidad</th>
											<th></th>
										</tr>
									</thead>
									<tbody>
										@foreach (var detalle in venta.VentaDetalle)
										{
											<tr>
												<td>@ObtenerNombreProducto(detalle.ProductoId)</td>
												<td>@detalle.Cantidad</td>
												<td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
											</tr>
										}
									</tbody>
								</table>
								<p class="float-start"><strong>Total de Detalles: </strong>@venta.VentaDetalle.Count</p>
							}
						</section>
					</div>
				</fieldset>
			</div>
			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Modificar</button>
			</div>
		</div>
	</div>
</EditForm>
@mensaje

@code {
	[Parameter]
	public int ventaId { get; set; }
	public Ventas venta { get; set; } = new Ventas();
	public List<Productos> listaProductos { get; set; } = new List<Productos>();
	public string mensaje { get; set; } = string.Empty;
	public int productoSeleccionado { get; set; }
	public float cantidad { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		venta = await ventasService.BuscarId(ventaId);
		listaProductos = await productosService.Listar(p => p.Eliminado == false);
	}

	public async Task Modificar()
	{
		// var Mensaje = new NotificationMessage
		// 	{
		// 		Severity = NotificationSeverity.Error,
		// 		Summary = "Error al guardar",
		// 		Detail = "Ha ocurrido un error",
		// 		Duration = 5_000
		// 	};
		// notificationService.Notify(Mensaje);

		// var Otro = new NotificationMessage
		// 	{
		// 		Severity = NotificationSeverity.Success,
		// 		Summary = "Guardo",
		// 		Detail = "Guardo correctamente",
		// 		Duration = 5_000
		// 	};
		// notificationService.Notify(Otro);

		if (await ventasService.Guardar(venta))
		{
			mensaje = "Se guardó correctamente la venta.";
		}
		else
		{
			mensaje = "No se pudo guardar la venta.";
		}
	}

	public async Task AgregarDetalle()
	{
		if (productoSeleccionado > 0 && cantidad > 0)
		{
			if (await ValidarDetalle())
			{
				var nuevoDetalle = new VentasDetalle { ProductoId = productoSeleccionado, Cantidad = cantidad };
				venta.VentaDetalle.Add(nuevoDetalle);
				await LimpiarPantalla();
			}
			else
				mensaje = "Debe elegir un producto.";
		}
	}

	public async Task<bool> ValidarDetalle()
	{
		var listaVentas = await ventasService.Listar(v => v.Eliminado == false);

		foreach (var venta in listaVentas)
		{
			foreach (var producto in venta.VentaDetalle)
			{
				if (producto.ProductoId == productoSeleccionado)
					return false;
			}
		}
		return true;
	}

	public async Task EliminarDetalle(VentasDetalle detalle)
	{
		venta.VentaDetalle.Remove(detalle);
	}

	public async Task LimpiarPantalla()
	{
		mensaje = string.Empty;
		productoSeleccionado = 0;
		cantidad = 0;
		StateHasChanged();
	}

	public string ObtenerNombreProducto(int id)
	{
		var dato = listaProductos.FirstOrDefault(p => p.ProductoId == id);

		return dato.Nombre;
	}

	void Volver()
	{
		navigation.NavigateTo("/Productos");
	}
}
