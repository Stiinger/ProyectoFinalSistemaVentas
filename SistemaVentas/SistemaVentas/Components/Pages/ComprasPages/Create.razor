@page "/CreateCompras"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ProveedoresService proveedorService
@inject ComprasService comprasService
@inject ProductosService productosService
@inject UnidadesMedidaService unidadesMedidaService
@inject MetodosPagoService metodosPagoService
@inject BancoService bancoService
@inject CapitalService capitalService
@inject TiposContribuyenteService tiposContribuyenteService
@inject NotificationService notificationService

<PageTitle>Crear Nueva Compra</PageTitle>
<RadzenNotification />
<EditForm Model="compra" OnValidSubmit="Crear" FormName="RegistroCompras">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3><strong>Crear Nueva Compra</strong></h3>
			</div>
			@*Cuerpo*@
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-2">
						@*CompraId*@
						<label class="form-label" for="compraId"><strong>CompraId</strong></label>
						<InputNumber id="compraId" class="form-control" @bind-Value="compra.CompraId" readonly></InputNumber>
					</div>
					<div class="col-2">
						@*FechaCreacion*@
						<label class="form-label" for="fecha"><strong>Fecha Creaci&oacute;n</strong></label>
						<InputDate id="fecha" class="form-control" @bind-Value="compra.FechaCreacion" readonly></InputDate>
					</div>
					<div class="col-3">
						@*Responsable*@
						<label class="form-label" for="responsable"><strong>Usuario Responsable</strong></label>
						<InputText id="responsable" class="form-control" @bind-Value="compra.UsuarioResponsable" placeholder="Ej: Juan Pérez"></InputText>
						<ValidationMessage For="@(() => compra.UsuarioResponsable)"></ValidationMessage>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-3">
						@*Nombre*@
						<label class="form-label" for="nombre"><strong>Proveedor</strong></label>
						<InputSelect id="nombre" class="form-select" @bind-Value="compra.ProveedorId">
							<option value="">Elige una opci&oacute;n</option>
							@foreach (var proveedor in proveedores)
							{
								<option value="@proveedor.ProveedorId">@proveedor.Nombre</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => compra.ProveedorId)"></ValidationMessage>
					</div>
					@*Actualizar proveedor*@
					@if (compra.ProveedorId != 0)
					{
						ActualizarDatosProveedor(compra.ProveedorId);
					}

					<div class="col-6">
						@*Direccion*@
						<label class="form-label" for="direccion"><strong>Direcci&oacute;n</strong></label>
						<InputText id="direccion" class="form-control" @bind-Value="direccion" placeholder="Ej: Ave. Libertad #23" readonly></InputText>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-2">
						@*TipoContribuyente*@
						<label class="form-label" for="ipoContribuyente"><strong>Tipo de Contribuyente</strong></label>
						<InputText id="tipoContribuyente" class="form-control" @bind-Value="contribuyente" placeholder="Persona Física" readonly></InputText>
					</div>
					<div class="col-2">
						@*RNC*@
						<label class="form-label" for="rnc"><strong>RNC</strong></label>
						<InputText id="rnc" class="form-control" @bind-Value="rnc" placeholder="40234573653" readonly></InputText>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-12">
						@*Nota*@
						<label class="form-label" for="nota"><strong>Nota:</strong></label>
						<label>(Opcional)</label>
						<InputTextArea id="nota" class="form-control" @bind-Value="compra.Nota" placeholder="Ingrese una nota"></InputTextArea>
						<ValidationMessage For="@(() => compra.Nota)"></ValidationMessage>
					</div>
				</div>
				@*ProveedoresDetalles*@
				<fieldset class="border-primmary border border-2 mb-3">
					@*Body*@
					<div class="card-body">
						<section class="row mb-4">
							<h3><strong>Detalles</strong></h3>
							<div class="row align-content-center">
								@*Productos*@
								<div class="col-3">
									<label class="form-label" for="producto"><strong>Producto</strong></label>
									<InputSelect id="producto" class="form-select" @bind-Value="producto">
										<option>Elige una opci&oacute;n</option>
										@foreach (var product in productos)
										{
											<option value="@product.ProductoId">@product.Nombre</option>
										}
									</InputSelect>
								</div>
								@* Unidades de Medida *@
								<div class="col-2">
									<label class="form-label"><strong>Uni. Medida</strong></label>
									<InputSelect class="form-select" @bind-Value="unidadesMedida" @oninput="VerificarUnidades">
										<option>Elige una opción</option>
										@foreach (var unidadMedida in unidadesMedidas)
										{
											<option value="@unidadMedida.UnidadMedidaId">@unidadMedida.UnidadMedida</option>
										}
									</InputSelect>
								</div>
								@* Unidades *@
								<div class="col-2">
									<label class="form-label"><strong>Cant. por Empaque</strong></label>
									<InputNumber class="form-control" @bind-Value="unidades" @attributes="UnidadesAttributes"></InputNumber>
								</div>
								@* Costo *@
								<div class="col-2">
									<label class="form-label"><strong>Costo</strong></label>
									<InputNumber class="form-control" @bind-Value="costoTotal"></InputNumber>
								</div>
								@*Cantidad*@
								<div class="col-1">
									<label class="form-label" for="cantidad"><strong>Cantidad</strong></label>
									<InputNumber id="cantidad" class="form-control" @bind-Value="cantidad"></InputNumber>
									<spam class="mensajeError">@mensaje</spam>
								</div>
								@*Boton*@
								<div class="col-auto d-flex align-items-end">
									<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
								</div>
							</div>
						</section>
						<section>
							@if (compra.ComprasDetalle.Count > 0)
							{
								@*Table Detalles*@
								<table class="table table-bordered miTabla">
									<thead>
										<tr>
											<th>Cantidad</th>
											<th>Descripci&oacute;n</th>
											<th>Uni. Medida</th>
											<th>Cant. por Empaque</th>
											<th>Costo</th>
											<th>C/U</th>
											<th>ITBIS</th>
											<th>Costo Total Neto</th>
											<th></th>
										</tr>
									</thead>
									<tbody>
										@foreach (var detalle in compra.ComprasDetalle)
										{
											<tr>
												<td>@detalle.CantidadProducto</td>
												<td>@BuscarProducto(detalle.ProductoId)</td>
												<td>@BuscarUnidadMedida(detalle.UnidadMedidaId)</td>
												<td>@detalle.CantidadUnidadProducto</td>
												<td>@detalle.CostoTotal.ToString("N2")</td>
												<td>@detalle.CostoUnidad.ToString("N2")</td>
												<td>@detalle.Itbis.ToString("N2")</td>
												<td>@detalle.CostoTotalNeto.ToString("N2")</td>
												<td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
											</tr>
										}
									</tbody>
								</table>
								<p><strong>Total de Productos: </strong>@compra.ComprasDetalle.Count</p>
							}
						</section>
					</div>
				</fieldset>
				<div class="row">
					<div class="col-md-6">
						<div class="col-6 mb-3">
							<label class="form-label" for="pago"><strong>Método de Pago</strong></label>
							<InputSelect id="pago" class="form-select" @bind-Value="compra.MetodoPagoId">
								<option value="">Elige una opción</option>
								@foreach (var metodoPago in metodosPagos)
								{
									<option value="@metodoPago.MetodoPagoId">@metodoPago.MetodoPago</option>
								}
							</InputSelect>
							<ValidationMessage For="@(() => compra.MetodoPagoId)"></ValidationMessage>
						</div>

						@if (compra.MetodoPagoId == 1)
						{
							<div class="col-4 mb-3">
								<label class="form-label" for="monto"><strong>Monto</strong></label>
								<div class="d-flex align-items-center">
									<InputNumber id="monto" class="form-control me-2" @bind-Value="compra.MontoPagado"></InputNumber>
									<img class="miImagen me-2" src="/Imagenes/pago-en-efectivo.png" alt="imagen-tarjeta-visa" />
								</div>
							</div>
							<div class="col-4 mb-3">
								<label class="form-label" for="devolucion"><strong>Devolución</strong></label>
								<div class="d-flex align-items-center">
									<InputNumber id="devolucion" class="form-control me-2" @bind-Value="compra.Devuelta" readonly />
									<img class="miImagen me-2" src="/Imagenes/devolucion-de-dinero.png" alt="imagen-tarjeta-visa" />
								</div>
							</div>
							<div class="col-4 mb-3">
								<label class="form-label" for="debe"><strong>Debe</strong></label>
								<div class="d-flex align-items-center">
									<InputNumber id="debe" class="form-control me-2" @bind-Value="compra.Deuda" readonly />
									<img class="miImagen me-2" src="/Imagenes/doument.png" alt="imagen-tarjeta-visa" />
								</div>
							</div>

							<div class="col-auto d-flex align-items-end">
								<button type="button" class="btn btn-outline-success" @onclick="CalcularPago"><i class="bi bi-check-lg" /> Verificar</button>
							</div>
						}

						@if (compra.MetodoPagoId == 2)
						{
							<div class="col-4 mb-3">
								<label class="form-label" for="debe"><strong>Debe</strong></label>
								<div class="d-flex align-items-center">
									<InputNumber id="debe" class="form-control me-2" @bind-Value="compra.Deuda" readonly />
									<img class="miImagen me-2" src="/Imagenes/doument.png" alt="imagen-tarjeta-visa" />
								</div>
							</div>
							<div class="col-auto d-flex align-items-end">
								<button type="button" class="btn btn-outline-success" @onclick="CalcularPago"><i class="bi bi-check-lg" /> Verificar</button>
							</div>
						}

						@if (compra.MetodoPagoId == 3)
						{
							@*Numero de Cuenta Proveedor*@
							<div class="col-6 mb-3">
								<label class="form-label" for="tarjeta"><strong>N&uacute;mero de Cuenta del Proveedor</strong></label>
								<div class="d-flex align-items-center">
									<InputText id="tarjeta" class="form-control me-2" @bind-Value="cuenta" readonly />
									<img class="miImagen me-2" src="/Imagenes/tarjeta-codigo.png" alt="imagen-tarjeta-visa" />
								</div>
							</div>
							@*Banco*@
							<div class="col-6 mb-3">
								<label class="form-label" for="banco"><strong>Banco</strong></label>
								<div class="d-flex align-items-center">
									<InputText id="banco" class="form-control me-2" @bind-Value="bancoProveedor" readonly />
									<img class="miImagen me-2" src="/Imagenes/banco.png" alt="imagen-tarjeta-visa" />
								</div>
							</div>
							@*Monto transferencia*@
							<div class="col-4 mb-3">
								<label class="form-label" for="codigo"><strong>Monto de Transferencia</strong></label>
								<div class="d-flex align-items-center">
									<InputNumber id="codigo" class="form-control me-2" @bind-Value="compra.MontoPagado" readonly />
									<img class="miImagen" src="/Imagenes/transferencia-movil.png" alt="imagen-tarjeta-codigo" />
								</div>
							</div>
							<div class="col-auto d-flex align-items-end">
								<button type="button" class="btn btn-outline-success" @onclick="CalcularPago"><i class="bi bi-check-lg" /> Verificar</button>
							</div>
							@*
						<div class="mensajeCorrecto mb-3">
						@mensajeValidacionTarjeta
						</div>
						<div class="mensajeError mb-3">
						@mensajeErrorTarjeta
						</div>

						*@
						}
					</div>
					<div class="col-md-6">
						<div class="card">
							<div class="card-body">
								<h3 class="text-center"><strong>Totales</strong></h3>
								<!-- Subtotal -->
								<div class="row mb-3 justify-content-center">
									<div class="col-6">
										<label class="form-label text-center"><strong>Subtotal</strong></label>
										<div class="input-group">
											<span class="input-group-text">$</span>
											<span id="subtotal" class="form-control">@compra.SubTotal.ToString("N2")</span>
										</div>
									</div>
								</div>
								<!-- Total ITBIS -->
								<div class="row mb-3 justify-content-center">
									<div class="col-6">
										<label class="form-label"><strong>Total ITBIS</strong></label>
										<div class="input-group">
											<span class="input-group-text">$</span>
											<span id="totalItbis" class="form-control">@compra.TotalItbis.ToString("N2")</span>
										</div>
									</div>
								</div>
								<!-- Total -->
								<div class="row mb-3 justify-content-center">
									<div class="col-6">
										<label class="form-label"><strong>Total</strong></label>
										<div class="input-group">
											<span class="input-group-text">$</span>
											<span id="total" class="form-control">@compra.TotalNeto.ToString("N2")</span>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Crear</button>
			</div>
		</div>
	</div>
</EditForm>

@code {
	public Proveedores proveedor { get; set; } = new Proveedores();
	public Compras compra { get; set; } = new Compras();
	public Capital capital { get; set; } = new Capital();
	public Banco banco { get; set; } = new Banco();
	public CuentasPorPagar cuentasPorPagar { get; set; } = new CuentasPorPagar();

	public List<Proveedores> proveedores = new List<Proveedores>();
	public List<Productos> productos = new List<Productos>();
	public List<UnidadesMedida> unidadesMedidas = new List<UnidadesMedida>();
	public List<MetodosPago> metodosPagos = new List<MetodosPago>();
	public List<TiposContribuyente> tiposContribuyente = new List<TiposContribuyente>();

	public int cantidad { get; set; }
	public int producto { get; set; }
	public int unidadesMedida { get; set; }
	public int unidades { get; set; }
	public decimal precio { get; set; }
	public decimal costoTotal { get; set; }

	public string contribuyente { get; set; }
	public string rnc { get; set; }
	public string direccion { get; set; }
	public string cuenta { get; set; }
	public string bancoProveedor { get; set; }


	// public string mensajeNombre { get; set; } = string.Empty;
	// public string mensajeEmail { get; set; } = string.Empty;
	// public string mensajeRNC { get; set; } = string.Empty;
	// public string otro { get; set; } = string.Empty;


	//eliminar mas tarde
	public string usuario { get; set; }
	public string numeroTarjeta { get; set; }
	public DateTime fechaVencimiento { get; set; } = DateTime.Today;
	public int codigoSeguridad { get; set; }


	//eliminar mas tarde
	public string mensaje { get; set; } = string.Empty;
	public string mensajeValidacionTarjeta { get; set; }
	public string mensajeErrorTarjeta { get; set; }

	public bool mostrarInfo { get; set; } = true;


	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		proveedores = await proveedorService.Listar(p => p.Eliminado == false);
		productos = await productosService.Listar(p => p.Eliminado == false);
		unidadesMedidas = await unidadesMedidaService.Listar(um => um.UnidadMedidaId > 0);
		metodosPagos = await metodosPagoService.Listar(um => um.MetodoPagoId > 0);
		capital = await capitalService.BuscarId(1);
		banco = await bancoService.BuscarId(1);
		tiposContribuyente = await tiposContribuyenteService.Listar(tc => tc.TipoContribuyenteId > 0);
	}

	public async Task Crear()
	{
		if (compra.ComprasDetalle.Count == 0)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al crear",
					Detail = "Debe ingresar al menos un detalle",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return;
		}

		if (String.IsNullOrEmpty(compra.Nota))
			compra.Nota = "----";

		if (compra.Estado == "Deuda")
		{
			cuentasPorPagar = new CuentasPorPagar
				{
					CompraId = compra.CompraId,
					DeudaInicial = compra.Deuda,
					DeudaRestante = compra.Deuda,
					Estado = "Pendiente"
				};

			compra.CuentaPorPagar = cuentasPorPagar;
		}

		var response = await comprasService.Crear(compra);
		if (response)
		{
			await Pagar();
			await SumarExistenciaProducto();
			await Task.Delay(3000);
			Volver();
		}
		else
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al crear",
					Detail = "No se pudo realizar la compra",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}
	}

	public async Task Pagar()
	{
		switch(compra.MetodoPagoId)
		{
			case 1:
				if(compra.MontoPagado >= compra.TotalNeto)
				{
					await capitalService.Modificar(capital);

					var MensajeEfectivo = new NotificationMessage
						{
							Severity = NotificationSeverity.Success,
							Summary = "Compra realizada con éxito",
							Detail = $"Pago realizado con éxito $RD{compra.TotalNeto.ToString("N2")}",
							Duration = 5_000
						};
					notificationService.Notify(MensajeEfectivo);
				}
				else
				{
					await capitalService.Modificar(capital);

					var MensajeEfectivo = new NotificationMessage
						{
							Severity = NotificationSeverity.Success,
							Summary = "Compra realizada con éxito",
							Detail = $"Debe $RD{compra.Deuda.ToString("N2")}",
							Duration = 5_000
						};
					notificationService.Notify(MensajeEfectivo);
				}
				break;

			case 2:
				var MensajeDeuda = new NotificationMessage
					{
						Severity = NotificationSeverity.Success,
						Summary = "Compra realizada con éxito",
						Detail = $"Debe $RD{compra.Deuda.ToString("N2")}",
						Duration = 5_000
					};
				notificationService.Notify(MensajeDeuda);
				break;

			case 3:
				var MensajeTrasnferencia = new NotificationMessage
					{
						Severity = NotificationSeverity.Success,
						Summary = "Compra realizada con éxito",
						Detail = $"Monto de transferencia $RD{compra.MontoPagado.ToString("N2")}",
						Duration = 5_000
					};
				notificationService.Notify(MensajeTrasnferencia);
				break;
		}
	}

	public async Task SumarExistenciaProducto()
	{
		foreach (var product in compra.ComprasDetalle)
		{
			var buscarProducto = productos.FirstOrDefault(p => p.ProductoId == product.ProductoId);
			buscarProducto.Existencia += product.CantidadProducto;

			await productosService.Guardar(buscarProducto);
		}
	}

	public async Task ActualizarExistenciaProducto(Productos producto)
	{
		await productosService.Guardar(producto);
	}

	public void CalcularPago()
	{
		decimal pagar = 0;

		switch (compra.MetodoPagoId)
		{
			case 1:
				if (capital.Efectivo < compra.MontoPagado)///si no hay suficiente efectivo
				{
					var Mensaje = new NotificationMessage
						{
							Severity = NotificationSeverity.Error,
							Summary = "Error al pagar con efectivo",
							Detail = "El dinero no es suficiente para realizar el pago",
							Duration = 5_000
						};
					notificationService.Notify(Mensaje);
					return;

					// var montoFaltante = compra.TotalNeto - capital.Efectivo;
					// compra.Devuelta = 0;
					// compra.Deuda = montoFaltante;
					// // compra.Estado = "Pendiente";

				}
				if (compra.MontoPagado >= compra.TotalNeto)///si el monto es mayor que el total
				{
					capital.Efectivo -= compra.TotalNeto;
					compra.Devuelta = Math.Round(compra.MontoPagado - compra.TotalNeto, 2);
					compra.Deuda = 0;
					compra.Estado = "Pagada";
				}
				else if (compra.MontoPagado < compra.TotalNeto)///si el monto es menor que el total
				{
					var montoFaltante = compra.TotalNeto - compra.MontoPagado;
					capital.Efectivo -= compra.MontoPagado;
					compra.Devuelta = 0;
					compra.Deuda = montoFaltante;
					compra.Estado = "Deuda";
				}
				break;
			case 2:
				compra.Deuda = compra.TotalNeto;
				compra.MontoPagado = 0;
				compra.Devuelta = 0;
				compra.Estado = "Deuda";

				break;
			case 3:
				if (banco.Monto < compra.TotalNeto)
				{
					var Mensaje = new NotificationMessage
						{
							Severity = NotificationSeverity.Error,
							Summary = "Error al pagar a través de transferencia",
							Detail = "Fondos insuficientes",
							Duration = 5_000
						};
					notificationService.Notify(Mensaje);
				}
				else
				{
					banco.Monto -= compra.TotalNeto;
					compra.MontoPagado = compra.TotalNeto;
					compra.Deuda = 0;
					compra.Devuelta = 0;
					compra.Estado = "Pagada";
				}
				break;
		}
	}

	public async Task AgregarDetalle()
	{
		if (await ValidarDetalle())
		{

			var costoUnidad = costoTotal / unidades;
			var costo = costoTotal * cantidad;
			var itbis = (decimal)((double)costo * 0.18);

			var nuevoDetalle = new ComprasDetalle
				{
					ProductoId = producto,
					CantidadProducto = cantidad,
					UnidadMedidaId = unidadesMedida,
					CantidadUnidadProducto = unidades,
					CostoTotal = costo,
					CostoUnidad = costoUnidad,
					Itbis = itbis,
					CostoTotalNeto = costo + itbis
				};

			compra.ComprasDetalle.Add(nuevoDetalle);

			compra.SubTotal += costo + itbis;
			compra.TotalItbis += itbis;
			compra.TotalNeto = compra.SubTotal + compra.TotalItbis;

			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Éxito al agregar detalle",
					Detail = "El detalle se agregó correctamente",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			if (compra.MetodoPagoId != 3 && compra.TotalNeto > 20000 && mostrarInfo)
			{
				var MensajeInfo = new NotificationMessage
					{
						Severity = NotificationSeverity.Warning,
						Summary = "Monto a pagar excede los $20,000.00",
						Detail = "Se recomienda realizar la compra a través de transferencia",
						Duration = 10_000
					};
				notificationService.Notify(MensajeInfo);

				mostrarInfo = false;
			}

			await LimpiarPantalla();
		}
	}

	public async Task<bool> ValidarDetalle()
	{
		foreach(var productoid in compra.ComprasDetalle)
		{
			if(productoid.ProductoId == producto)
			{
				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al agregar detalle",
						Detail = "Este producto ya existe en el detalle",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);
				return false;
			}
		}

		if (producto <= 0)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "Debe elegir un producto",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		if (unidadesMedida <= 0)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "Debe elegir una unidad de medida",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		if (unidades <= 0 || unidades > 12)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "Las unidades deben ser mayor a 0 y menor que 12",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		if (costoTotal <= 0 || costoTotal > 100000)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "El costo debe ser mayor a $0.00 y menor que $100,000.00",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		if (cantidad <= 0 || cantidad > 1000)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "La cantidad debe ser mayor a 0 y menor que 1,000",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		return true;
	}

	private void ActualizarDatosProveedor(int proveedorId)
	{
		var proveedorSeleccionado = proveedores.FirstOrDefault(p => p.ProveedorId == proveedorId);
		if (proveedorSeleccionado != null)
		{
			direccion = proveedorSeleccionado.Ciudad + ", " + proveedorSeleccionado.Direccion;
			rnc = proveedorSeleccionado.RNC;
			bancoProveedor = proveedorSeleccionado.Banco;
			cuenta = proveedorSeleccionado.NumeroCuenta;

			var contribuyenteId = tiposContribuyente
			.FirstOrDefault(tc => tc.TipoContribuyenteId == proveedorSeleccionado.TipoContribuyenteId);

			contribuyente = contribuyenteId.Descripcion;
		}
		else
		{
			// Limpiar los campos si no se selecciona un proveedor válido
			direccion = string.Empty;
			contribuyente = string.Empty;
			rnc = string.Empty;
		}
	}

	bool unidadesDisabled = true;

	void VerificarUnidades(ChangeEventArgs e)
	{
		var unidadesMedidaSeleccionada = (string)e.Value;

		unidadesDisabled = unidadesMedidaSeleccionada == "2" || unidadesMedidaSeleccionada == "0";

		if (unidadesMedidaSeleccionada == "2")
			unidades = 1;
		else
			unidades = 0;
	}

	Dictionary<string, object> UnidadesAttributes => new Dictionary<string, object>
	{
		{ "class", "form-control" },
		{ "bind-Value", "@unidades" },
		{ "disabled", unidadesDisabled }
	};

	public string BuscarProducto(int id)
	{
		var valor = productos.FirstOrDefault(p => p.ProductoId == id);

		return valor.Nombre;
	}

	public string BuscarUnidadMedida(int id)
	{
		var valor = unidadesMedidas.FirstOrDefault(u => u.UnidadMedidaId == id);

		return valor.UnidadMedida;
	}

	public async Task EliminarDetalle(ComprasDetalle detalle)
	{
		compra.SubTotal -= detalle.CostoTotalNeto;
		compra.TotalItbis -= detalle.Itbis;
		compra.TotalNeto -= detalle.CostoTotalNeto + detalle.Itbis;
		compra.ComprasDetalle.Remove(detalle);

		var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Éxito al eliminar detalle",
				Detail = "El detalle se eliminó con éxito",
				Duration = 5_000
			};
		notificationService.Notify(Mensaje);
	}

	public async Task LimpiarPantalla()
	{
		cantidad = 0;
		producto = 0;
		unidadesMedida = 0;
		unidades = 0;
		costoTotal = 0;
		StateHasChanged();
	}

	void Volver()
	{
		navigation.NavigateTo("/Compras");
	}
}