@page "/Compras"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ComprasService comprasService
@inject ProveedoresService proveedoresService
@inject MetodosPagoService metodosPagoService
@inject NotificationService notificationService

@attribute [Authorize(Roles = "Admin")]
<PageTitle>Compras</PageTitle>
<RadzenNotification/>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Compras</strong></h3>
			<div class="d-flex align-items-start">
				<div class="px-2">
					<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
			</div>
		</div>
		@*Body*@
		<div class="card-body">
			@if (loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info">
					</div>
				</div>
			}
			else if (compras.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay compras creadas</h1>
			}
			else
			{

				@*Fechas*@
				<div class="mb-3">
					<div class="row">
						<div class="col-3">
							<label class="form-label" for="desde"><strong>Desde:</strong></label>
							<InputDate id="desde" class="form-control" @bind-Value="desde"></InputDate>
						</div>
						<div class="col-3">
							<label class="form-label" for="hasta"><strong>Hasta:</strong></label>
							<InputDate id="hasta" class="form-control" @bind-Value="hasta"></InputDate>
						</div>
					</div>
				</div>

				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option>Elige una opci&oacute;n</option>
								<option value="id">Id</option>
								<option value="usuario">Usuario Responsable</option>
								<option value="proveedor">Proveedor</option>
								<option value="pago">M&eacute;todo de Pago</option>
								<option value="estado">Estado</option>
								<option value="rnc">RNC</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>CompraId</th>
							<th>Fecha de Compra</th>
							<th>Usuario Responsable</th>
							<th>Proveedor</th>
							<th>M&eacute;todo de Pago</th>
							<th>Estado de la Compra</th>
							<th>Acciones</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var compra in compras)
						{
							<tr>
								<td>@compra.CompraId</td>
								<td>@compra.FechaCreacion.ToShortDateString()</td>
								<td>@compra.UsuarioResponsable</td>
								<td>@BuscarProveedor(compra.ProveedorId)</td>
								<td>@BuscarMetodoPago(compra.MetodoPagoId)</td>
								<td>@compra.Estado</td>
								<td>
									<div class="btn-group" role="group">
										<button type="button" class="btn btn-outline-info" @onclick="()=> IrADetalles(compra.CompraId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Ver detalles">
											<i class="bi bi-eye"></i>
										</button>

										<button type="button" class="btn btn-outline-warning" @onclick="()=> IrAEditar(compra.CompraId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar">
											<i class="bi bi-pencil-square"></i>
										</button>
										<button type="button" class="btn btn-outline-danger" @onclick="()=> IrAEliminar(compra.CompraId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Eliminar">
											<i class="bi bi-trash3-fill"></i>
										</button>
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		<div class="card-footer">
			<p><strong>Total de Compras:</strong> @compras.Count</p>
		</div>
	</div>
</div>
@mensaje

@code {
	public List<Compras> compras = new List<Compras>();
	public List<Proveedores> proveedores = new List<Proveedores>();
	public List<MetodosPago> metodosPago = new List<MetodosPago>();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public bool loading { get; set; } = true;
	public DateTime desde { get; set; } = DateTime.Today;
	public DateTime hasta { get; set; } = DateTime.Today;

	protected override async Task OnInitializedAsync()
	{
		// await Task.Delay(500);
		compras = await comprasService.Listar(p => p.Eliminado == false);
		proveedores = await proveedoresService.Listar(p => p.Eliminado == false);
		metodosPago = await metodosPagoService.Listar(m => m.MetodoPagoId > 0);
		loading = false;

		if (compras.Count == 0)
			StateHasChanged();
	}

	public async Task Buscar()
	{
		if (desde > hasta)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al filtrar",
					Detail = "La fecha inicial no puede ser mayor a la fecha final",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			return;
		}

		else if (filtro == null)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al filtrar",
					Detail = "Debe elegir un método parar filtrar",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			return;
		}

		else if (valorFiltro == null)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al filtrar",
					Detail = "Debe ingresar un dato",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			return;
		}

		List<Compras> listaFiltro = new List<Compras>();

		switch (filtro)
		{
			case "id":
				if (int.TryParse(valorFiltro, out int id))
				{
					var resultadoId = compras.FirstOrDefault(c => c.CompraId == id);
					if (resultadoId != null &&
						(resultadoId.FechaCreacion >= desde && resultadoId.FechaCreacion <= hasta))
					{
						compras.Clear();
						compras.Add(resultadoId);
						VerificarMensajeFiltro(true);
					}
					else
						VerificarMensajeFiltro(false);
				}
				else
				{
					var Mensaje = new NotificationMessage
						{
							Severity = NotificationSeverity.Error,
							Summary = "Error al filtrar",
							Detail = "El valor ingresado para CompraId no es válido",
							Duration = 5_000
						};
					notificationService.Notify(Mensaje);
					return;
				}
				break;

			case "usuario":
				foreach(var compra in compras)
				{
					if (compra.UsuarioResponsable.ToLower().Contains(valorFiltro.ToLower()) &&
							compra.FechaCreacion >= desde && compra.FechaCreacion <= hasta)
					{
						listaFiltro.Add(compra);
					}
				}

				if (listaFiltro.Count > 0)
				{
					compras = listaFiltro;
					VerificarMensajeFiltro(true);
				}
				else
					VerificarMensajeFiltro(false);
				break;

			case "proveedor":
				var resultadoProveedor = proveedores
				.FirstOrDefault(c => c.Representante.ToLower().Contains(valorFiltro.ToLower()));

				if (resultadoProveedor != null)
				{
					var proveedorId = resultadoProveedor.ProveedorId;
					// var compra = compras.FirstOrDefault(c => c.ProveedorId == proveedorId);

					foreach (var compra in compras)
					{
						if (compra.ProveedorId == proveedorId && 
							compra.FechaCreacion >= desde && compra.FechaCreacion <= hasta)
						{
							listaFiltro.Add(compra);
						}
					}

					if (listaFiltro.Count > 0)
					{
						compras = listaFiltro;
						VerificarMensajeFiltro(true);
					}
					else
						VerificarMensajeFiltro(false);
				}

				break;

			case "pago":
				var resultadoMetodoPago = metodosPago
				.FirstOrDefault(c => c.MetodoPago.ToLower().Contains(valorFiltro.ToLower()));

				if (resultadoMetodoPago != null)
				{
					var pagoId = resultadoMetodoPago.MetodoPagoId;
					// var compra = compras.FirstOrDefault(c => c.ProveedorId == proveedorId);

					foreach (var compra in compras)
					{
						if (compra.MetodoPagoId == pagoId &&
							compra.FechaCreacion >= desde && compra.FechaCreacion <= hasta)
						{
							listaFiltro.Add(compra);
						}
					}

					if (listaFiltro.Count > 0)
					{
						compras = listaFiltro;
						VerificarMensajeFiltro(true);
					}
					else
						VerificarMensajeFiltro(false);
				}
				break;

			case "estado":
				foreach (var compra in compras)
				{
					if (compra.Estado.ToLower().Contains(valorFiltro.ToLower()) &&
							compra.FechaCreacion >= desde && compra.FechaCreacion <= hasta)
					{
						listaFiltro.Add(compra);
					}
				}
				if (listaFiltro.Count > 0)
				{
					compras = listaFiltro;
					VerificarMensajeFiltro(true);
				}
				else
					VerificarMensajeFiltro(false);
				break;
		}
	}

	public void VerificarMensajeFiltro(bool valor)
	{
		if (valor)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Éxito al filtrar",
					Detail = "Se encontraron resultados",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}
		else
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al filtrar",
					Detail = "No se encontraron resultados",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}
	}

	public string BuscarProveedor(int id)
	{
		var proveedor = proveedores.FirstOrDefault(c => c.ProveedorId == id);
		return proveedor.Representante;
	}

	public string BuscarMetodoPago(int id)
	{
		var metodo = metodosPago.FirstOrDefault(c => c.MetodoPagoId == id);
		return metodo.MetodoPago;
	}

	public string FormatRNCNumber(string rnc)
	{
		return $"{rnc.Substring(0, 3)}-{rnc.Substring(3, 7)}-{rnc.Substring(10)}";
	}

	public async Task Restablecer()
	{
		compras = await comprasService.Listar(p => p.Eliminado == false);

		var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Éxito al restablecer",
				Detail = "Los datos fueron restablecidos con éxito",
				Duration = 5_000
			};
		notificationService.Notify(Mensaje);
	}

	public async Task LimpiarPantalla()
	{
		await Task.Delay(2000);
		mensaje = string.Empty;
	}

	void Volver()
	{
		navigation.NavigateTo("/MenuPrincipal");
	}

	void IrACrear()
	{
		navigation.NavigateTo("/CreateCompras");
	}

	void IrADetalles(int id)
	{
		navigation.NavigateTo($"/ViewCompras/compraId={id}");
	}
	void IrAEditar(int id)
	{
		navigation.NavigateTo($"/EditCompras/compraId={id}");
	}
	void IrAEliminar(int id)
	{
		navigation.NavigateTo($"/DeleteCompras/compraId={id}");
	}
}