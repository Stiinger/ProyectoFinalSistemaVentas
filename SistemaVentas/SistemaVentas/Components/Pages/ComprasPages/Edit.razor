@page "/EditCompras"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ProveedoresService proveedorService
@inject ComprasService comprasService
@inject ProductosService productosService
@inject UnidadesMedidaService unidadesMedidaService
@inject MetodosPagoService metodosPagoService
@inject NotificationService notificationService

<PageTitle>Editar Compra</PageTitle>
<EditForm Model="compra" OnValidSubmit="Modificar" FormName="EditarCompras">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3><strong>Editar Compra</strong></h3>
			</div>
			@*Cuerpo*@
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-2">
						@*FechaCreacion*@
						<label class="form-label" for="fecha"><strong>Fecha Creaci&oacute;n</strong></label>
						<InputDate id="fecha" class="form-control" @bind-Value="compra.FechaCreacion" readonly></InputDate>
					</div>
					<div class="col-3">
						@*Responsable*@
						<label class="form-label" for="responsable"><strong>Usuario Responsable</strong></label>
						<InputText id="responsable" class="form-control" @bind-Value="compra.UsuarioResponsable" placeholder="Ej: Juan Pérez"></InputText>
						<ValidationMessage For="@(() => compra.UsuarioResponsable)"></ValidationMessage>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-3">
						@*Nombre*@
						<label class="form-label" for="nombre"><strong>Proveedor</strong></label>
						<InputSelect id="nombre" class="form-select" @bind-Value="compra.ProveedorId" @oninput="()=>ActualizarDatosProveedor(compra.ProveedorId)">
							<option value="">Elige una opción</option>
							@foreach (var proveedor in proveedores)
							{
								<option value="@proveedor.ProveedorId">@proveedor.Nombre</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => compra.ProveedorId)"></ValidationMessage>
					</div>
					<div class="col-6">
						@*Direccion*@
						<label class="form-label" for="direccion"><strong>Direcci&oacute;n</strong></label>
						<InputText id="direccion" class="form-control" @bind-Value="direccion" placeholder="Ej: Ave. Libertad #23" readonly></InputText>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-2">
						@*TipoContribuyente*@
						<label class="form-label" for="ipoContribuyente"><strong>Tipo de Contribuyente</strong></label>
						<InputText id="tipoContribuyente" class="form-control" @bind-Value="contribuyente" placeholder="Persona Física" readonly></InputText>
					</div>
					<div class="col-2">
						@*RNC*@
						<label class="form-label" for="rnc"><strong>RNC</strong></label>
						<InputText id="rnc" class="form-control" @bind-Value="rnc" placeholder="40234573653" readonly></InputText>
					</div>
					<div class="col-2">
						@*Metodos de Pago*@
						<label class="form-label" for="pago"><strong>M&eacute;todo de Pago:</strong></label>
						<InputSelect id="pago" class="form-select" @bind-Value="compra.MetodoPagoId">
							<option value="">Elige una opción</option>
							@foreach (var metodoPago in metodosPagos)
							{
								<option value="@metodoPago.MetodoPagoId">@metodoPago.MetodoPago</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => compra.ProveedorId)"></ValidationMessage>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-12">
						@*Nota*@
						<label class="form-label" for="nota"><strong>Nota:</strong></label>
						<label>(Opcional)</label>
						<InputTextArea id="nota" class="form-control" @bind-Value="compra.Nota" placeholder="Ingrese una nota"></InputTextArea>
						<ValidationMessage For="@(() => compra.Nota)"></ValidationMessage>
					</div>
				</div>
				@*ProveedoresDetalles*@
				<fieldset class="border-primmary border border-2 mb-3">
					@*Body*@
					<div class="card-body">
						<section class="row mb-4">
							<h3><strong>Detalles</strong></h3>
							<div class="row align-content-center">
								@*Productos*@
								<div class="col-3">
									<label class="form-label" for="producto"><strong>Producto</strong></label>
									<InputSelect id="producto" class="form-select" @bind-Value="producto">
										<option>Elige una opci&oacute;n</option>
										@foreach (var product in productos)
										{
											<option value="@product.ProductoId">@product.Nombre</option>
										}
									</InputSelect>
								</div>
								@* Unidades de Medida *@
								<div class="col-2">
									<label class="form-label"><strong>Unidades de Medida</strong></label>
									<InputSelect class="form-select" @bind-Value="unidadesMedida" @oninput="VerificarUnidades">
										<option>Elige una opción</option>
										@foreach (var unidadMedida in unidadesMedidas)
										{
											<option value="@unidadMedida.UnidadMedidaId">@unidadMedida.UnidadMedida</option>
										}
									</InputSelect>
								</div>

								@* Costo *@
								<div class="col-2">
									<label class="form-label"><strong>Costo</strong></label>
									<InputNumber class="form-control" @bind-Value="costoTotal"></InputNumber>
								</div>

								@* Unidades *@
								<div class="col-2">
									<label class="form-label"><strong>Unidades</strong></label>
									<InputNumber class="form-control" @bind-Value="unidades" @attributes="UnidadesAttributes"></InputNumber>
								</div>
								@*Cantidad*@
								<div class="col-1">
									<label class="form-label" for="cantidad"><strong>Cantidad</strong></label>
									<InputNumber id="cantidad" class="form-control" @bind-Value="cantidad"></InputNumber>
									<spam class="mensajeError">@mensaje</spam>
								</div>
								@*Boton*@
								<div class="col-auto d-flex align-items-end">
									<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
								</div>
							</div>
						</section>
						<section>
							@if (compra.ComprasDetalle.Count > 0)
							{
								@*Table Detalles*@
								<table class="table table-bordered miTabla">
									<thead>
										<tr>
											<th>Cantidad</th>
											<th>Descripci&oacute;n</th>
											<th>Unidad de Medida</th>
											<th>Costo</th>
											<th>C/U</th>
											<th>ITBIS</th>
											<th>Valor</th>
											<th></th>
										</tr>
									</thead>
									<tbody>
										@foreach (var detalle in compra.ComprasDetalle)
										{
											<tr>
												<td>@detalle.CantidadProducto</td>
												<td>@BuscarProducto(detalle.ProductoId)</td>
												<td>@BuscarUnidadMedida(detalle.UnidadMedidaId)</td>
												<td>@detalle.CostoTotal.ToString("N2")</td>
												<td>@detalle.CostoUnidad.ToString("N2")</td>
												<td>@detalle.Itbis.ToString("N2")</td>
												<td>@detalle.CostoTotalNeto.ToString("N2")</td>
												<td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
											</tr>
										}
									</tbody>
								</table>
								<p><strong>Total de Productos: </strong>@compra.ComprasDetalle.Count</p>
							}
						</section>
					</div>
				</fieldset>
				<div class="mb-3">
					<h3 class="text-center"><strong>Totales</strong></h3>
				</div>
				<div class="row justify-content-center">
					<div class="col-12 col-md-6">
						<div class="card mb-3">
							<div class="card-body">
								<!-- Subtotal -->
								<div class="row mb-3 justify-content-center">
									<div class="col-6">
										<label class="form-label text-center"><strong>Subtotal</strong></label>
										<div class="input-group">
											<span class="input-group-text">$</span>
											<InputNumber id="subtotal" class="form-control" @bind-Value="compra.SubTotal" readonly style="width: 80%;"></InputNumber>
										</div>
									</div>
								</div>

								<!-- Total ITBIS -->
								<div class="row mb-3 justify-content-center">
									<div class="col-6">
										<label class="form-label"><strong>Total ITBIS</strong></label>
										<div class="input-group">
											<span class="input-group-text">$</span>
											<InputNumber id="totalItbis" class="form-control" @bind-Value="compra.TotalItbis" readonly style="width: 80%;"></InputNumber>
										</div>
									</div>
								</div>

								<!-- Total -->
								<div class="row mb-3 justify-content-center">
									<div class="col-6">
										<label class="form-label"><strong>Total</strong></label>
										<div class="input-group">
											<span class="input-group-text">$</span>
											<InputNumber id="total" class="form-control" @bind-Value="compra.TotalNeto" readonly style="width: 80%;"></InputNumber>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>

			</div>
			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Crear</button>
			</div>
		</div>
	</div>
</EditForm>
@mensaje
@otro

@code {
	public Proveedores proveedor { get; set; } = new Proveedores();
	public Compras compra { get; set; } = new Compras();

	public List<Proveedores> proveedores = new List<Proveedores>();
	public List<Productos> productos = new List<Productos>();
	public List<UnidadesMedida> unidadesMedidas = new List<UnidadesMedida>();
	public List<MetodosPago> metodosPagos = new List<MetodosPago>();

	public int cantidad { get; set; }
	public int producto { get; set; }
	public int unidadesMedida { get; set; }
	public int unidades { get; set; }
	public decimal precio { get; set; }
	public decimal costoTotal { get; set; }

	public string contribuyente { get; set; }
	public string rnc { get; set; }
	public string direccion { get; set; }

	public string mensaje { get; set; } = string.Empty;
	public string mensajeNombre { get; set; } = string.Empty;
	public string mensajeEmail { get; set; } = string.Empty;
	public string mensajeRNC { get; set; } = string.Empty;
	public string otro { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		proveedores = await proveedorService.Listar(p => p.Eliminado == false);
		productos = await productosService.Listar(p => p.Eliminado == false);
		unidadesMedidas = await unidadesMedidaService.Listar(um => um.UnidadMedidaId > 0);
		metodosPagos = await metodosPagoService.Listar(um => um.MetodoPagoId > 0);
	}

	public async void Modificar()
	{
		// var Mensaje = new NotificationMessage
		// 	{
		// 		Severity = NotificationSeverity.Error,
		// 		Summary = "Error al guardar",
		// 		Detail = "Ha ocurrido un error",
		// 		Duration = 5_000
		// 	};
		// notificationService.Notify(Mensaje);

		// var Otro = new NotificationMessage
		// 	{
		// 		Severity = NotificationSeverity.Success,
		// 		Summary = "Guardo",
		// 		Detail = "Guardo correctamente",
		// 		Duration = 5_000
		// 	};
		// notificationService.Notify(Otro);

		if (await ValidarProveedor())
		{
			if (String.IsNullOrEmpty(proveedor.Nota))
				proveedor.Nota = "----";

			var response = await proveedorService.Crear(proveedor);

			// if (response.IsSuccessStatusCode)
			// {
			// 	mensaje = "La solicitud fue exitosa.";
			// }
			// else
			// {
			// 	mensaje = "La solicitud falló con el siguiente estado: " + response.ToString();
			// }
		}
		else
			mensaje = "Algunos datos ya existen en la base de datos.";

		StateHasChanged();
		await Task.Delay(4000);
		await LimpiarPantalla();
	}

	public async Task<bool> ValidarProveedor()
	{
		var validar = await proveedorService.Listar(p => p.Eliminado == false);
		var nombre = validar.FirstOrDefault(p => p.Nombre == proveedor.Nombre);
		var email = validar.FirstOrDefault(p => p.Email == proveedor.Email);
		var rnc = validar.FirstOrDefault(p => p.RNC == proveedor.RNC);

		bool nombreValido = true;
		bool emailValido = true;
		bool rncValido = true;

		if (nombre != null)
		{
			nombreValido = false;
			mensajeNombre = "Ya existe un proveedor con este nombre";
		}

		if (email != null)
		{
			emailValido = false;
			mensajeEmail = "Ya existe un proveedor con este email";
		}

		if (rnc != null)
		{
			rncValido = false;
			mensajeRNC = "Ya existe un proveedor con este número de RNC";
		}

		return nombreValido && emailValido && rncValido;
	}

	public async Task AgregarDetalle()
	{
		var costoUnidad = costoTotal / unidades;
		var costo = costoTotal * cantidad;
		var itbis = (decimal)((double)costo * 0.18);

		var nuevoDetalle = new ComprasDetalle
			{
				CantidadProducto = cantidad,
				ProductoId = producto,
				UnidadMedidaId = unidadesMedida,
				CostoTotal = costo,
				CostoUnidad = costoUnidad,
				Itbis = itbis,
				CostoTotalNeto = costo + itbis
			};

		compra.ComprasDetalle.Add(nuevoDetalle);

		compra.SubTotal += costo + itbis;
		compra.TotalItbis += itbis;
		compra.TotalNeto = compra.SubTotal + compra.TotalItbis;

		if (producto != 0 && unidadesMedida != 0 && precio != 0 && cantidad != 0)
		{
			if (costoTotal >= precio)
			{
				//costo no puede ser mayor que precio
			}



			if (await ValidarDetalle())
			{
				// var nuevoDetalle = new ProveedoresDetalle { ContactoId = tipo, Contacto = contacto };
				// proveedor.ProveedoresDetalle.Add(nuevoDetalle);
				// await LimpiarPantalla();
			}
			else
				mensaje = "La longitud del contacto debe ser de 10 digitos";
		}
	}

	public async Task<bool> ValidarDetalle()
	{
		// foreach (var detalle in compra.ComprasDetalle)
		// {
		// 	if (detalle.No == contacto)
		// 		return false;
		// }

		return true;
	}

	// public string ObtenerTipoContacto(int id)
	// {
	// 	var dato = contactos.FirstOrDefault(c => c.ContactoId == id);

	// 	return dato.Descripcion;
	// }

	// public string FormatPhoneNumber(string phoneNumber)
	// {
	// 	return $"{phoneNumber.Substring(0, 3)}-{phoneNumber.Substring(3, 3)}-{phoneNumber.Substring(6)}";
	// }

	private void ActualizarDatosProveedor(int proveedorId)
	{
		// var proveedorSeleccionado = proveedores.FirstOrDefault(p => p.ProveedorId == proveedorId);
		// if (proveedorSeleccionado != null)
		// {
		// 	direccion = proveedorSeleccionado.Ciudad + ", " + proveedorSeleccionado.Direccion;
		// 	contribuyente = proveedorSeleccionado.TipoContribuyente;
		// 	rnc = proveedorSeleccionado.RNC;
		// }
		// else
		// {
		// 	// Limpiar los campos si no se selecciona un proveedor válido
		// 	direccion = string.Empty;
		// 	contribuyente = string.Empty;
		// 	rnc = string.Empty;
		// }
	}

	bool unidadesDisabled = true;

	void VerificarUnidades(ChangeEventArgs e)
	{
		var unidadesMedidaSeleccionada = (string)e.Value;

		unidadesDisabled = unidadesMedidaSeleccionada == "2" || unidadesMedidaSeleccionada == "0";

		if (unidadesMedidaSeleccionada == "2")
			unidades = 1;
		else
			unidades = 0;
	}

	Dictionary<string, object> UnidadesAttributes => new Dictionary<string, object>
	{
		{ "class", "form-control" },
		{ "bind-Value", "@unidades" },
		{ "disabled", unidadesDisabled }
	};

	public string BuscarProducto(int id)
	{
		var valor = productos.FirstOrDefault(p => p.ProductoId == id);

		return valor.Nombre;
	}

	public string BuscarUnidadMedida(int id)
	{
		var valor = unidadesMedidas.FirstOrDefault(u => u.UnidadMedidaId == id);

		return valor.UnidadMedida;
	}

	public async Task EliminarDetalle(ComprasDetalle detalle)
	{
		compra.ComprasDetalle.Remove(detalle);
	}

	public async Task LimpiarPantalla()
	{
		mensaje = string.Empty;
		mensajeNombre = string.Empty;
		mensajeEmail = string.Empty;
		mensajeRNC = string.Empty;

		cantidad = 0;
		precio = 0;
		producto = 0;
		unidadesMedida = 0;
		StateHasChanged();
	}

	void Volver()
	{
		navigation.NavigateTo("/Proveedores");
	}
}
