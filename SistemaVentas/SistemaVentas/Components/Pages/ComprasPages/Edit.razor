@page "/EditCompras"
@page "/EditCompras/compraId={compraId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ProveedoresService proveedorService
@inject ComprasService comprasService
@inject ProductosService productosService
@inject UnidadesMedidaService unidadesMedidaService
@inject MetodosPagoService metodosPagoService
@inject BancoService bancoService
@inject CapitalService capitalService
@inject TiposContribuyenteService tiposContribuyenteService
@inject NotificationService notificationService

<PageTitle>Modificar Compra</PageTitle>
<RadzenNotification />
<EditForm Model="compra" OnValidSubmit="Crear" FormName="RegistroCompras">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3><strong>Modificar Compra</strong></h3>
			</div>
			@*Cuerpo*@
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-2">
						@*CompraId*@
						<label class="form-label" for="compraId"><strong>CompraId</strong></label>
						<InputNumber id="compraId" class="form-control" @bind-Value="compra.CompraId" readonly></InputNumber>
					</div>
					<div class="col-2">
						@*FechaCreacion*@
						<label class="form-label" for="fecha"><strong>Fecha Creaci&oacute;n</strong></label>
						<InputDate id="fecha" class="form-control" @bind-Value="compra.FechaCreacion" readonly></InputDate>
					</div>
					<div class="col-3">
						@*Responsable*@
						<label class="form-label" for="responsable"><strong>Usuario Responsable</strong></label>
						<InputText id="responsable" class="form-control" @bind-Value="compra.UsuarioResponsable" placeholder="Ej: Juan Pérez"></InputText>
						<ValidationMessage For="@(() => compra.UsuarioResponsable)"></ValidationMessage>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-3">
						@*Nombre*@
						<label class="form-label" for="nombre"><strong>Proveedor</strong></label>
						<InputSelect id="nombre" class="form-select" @bind-Value="compra.ProveedorId">
							<option value="">Elige una opción</option>
							@foreach (var proveedor in proveedores)
							{
								<option value="@proveedor.ProveedorId">@proveedor.Encargado</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => compra.ProveedorId)"></ValidationMessage>
					</div>
					@*Actualizar proveedor*@
					@if (compra.ProveedorId != 0)
					{
						ActualizarDatosProveedor(compra.ProveedorId);
					}

					<div class="col-6">
						@*Direccion*@
						<label class="form-label" for="direccion"><strong>Direcci&oacute;n</strong></label>
						<InputText id="direccion" class="form-control" @bind-Value="direccion" placeholder="Ej: Ave. Libertad #23" readonly></InputText>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-2">
						@*TipoContribuyente*@
						<label class="form-label" for="ipoContribuyente"><strong>Tipo de Contribuyente</strong></label>
						<InputText id="tipoContribuyente" class="form-control" @bind-Value="contribuyente" placeholder="Persona Física" readonly></InputText>
					</div>
					<div class="col-2">
						@*RNC*@
						<label class="form-label" for="rnc"><strong>RNC</strong></label>
						<InputText id="rnc" class="form-control" @bind-Value="rnc" placeholder="40234573653" readonly></InputText>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-12">
						@*Nota*@
						<label class="form-label" for="nota"><strong>Nota:</strong></label>
						<label>(Opcional)</label>
						<InputTextArea id="nota" class="form-control" @bind-Value="compra.Nota" placeholder="Ingrese una nota"></InputTextArea>
						<ValidationMessage For="@(() => compra.Nota)"></ValidationMessage>
					</div>
				</div>
				@*ProveedoresDetalles*@
				<fieldset class="border-primmary border border-2 mb-3">
					@*Body*@
					<div class="card-body">
						<section class="row mb-4">
							<h3><strong>Detalles</strong></h3>
							<div class="row align-content-center">
								@*Productos*@
								<div class="col-3">
									<label class="form-label" for="producto"><strong>Producto</strong></label>
									<InputSelect id="producto" class="form-select" @bind-Value="producto">
										<option>Elige una opci&oacute;n</option>
										@foreach (var product in productos)
										{
											<option value="@product.ProductoId">@product.Nombre</option>
										}
									</InputSelect>
								</div>
								@* Unidades de Medida *@
								<div class="col-2">
									<label class="form-label"><strong>Uni. Medida</strong></label>
									<InputSelect class="form-select" @bind-Value="unidadesMedida" @oninput="VerificarUnidades">
										<option>Elige una opción</option>
										@foreach (var unidadMedida in unidadesMedidas)
										{
											<option value="@unidadMedida.UnidadMedidaId">@unidadMedida.UnidadMedida</option>
										}
									</InputSelect>
								</div>
								@* Unidades *@
								<div class="col-2">
									<label class="form-label"><strong>Cant. por Empaque</strong></label>
									<InputNumber class="form-control" @bind-Value="unidades" @attributes="UnidadesAttributes"></InputNumber>
								</div>
								@* Costo *@
								<div class="col-2">
									<label class="form-label"><strong>Costo</strong></label>
									<InputNumber class="form-control" @bind-Value="costoTotal"></InputNumber>
								</div>
								@*Cantidad*@
								<div class="col-1">
									<label class="form-label" for="cantidad"><strong>Cantidad</strong></label>
									<InputNumber id="cantidad" class="form-control" @bind-Value="cantidad"></InputNumber>
									<spam class="mensajeError">@mensaje</spam>
								</div>
								@*Boton*@
								<div class="col-auto d-flex align-items-end">
									<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
								</div>
							</div>
						</section>
						<section>
							@if (compra.ComprasDetalle.Count > 0)
							{
								@*Table Detalles*@
								<table class="table table-bordered miTabla">
									<thead>
										<tr>
											<th>Cantidad</th>
											<th>Descripci&oacute;n</th>
											<th>Uni. Medida</th>
											<th>Cant. por Empaque</th>
											<th>Costo</th>
											<th>C/U</th>
											<th>ITBIS (18%)</th>
											<th>Costo Total Neto</th>
											<th></th>
										</tr>
									</thead>
									<tbody>
										@foreach (var detalle in compra.ComprasDetalle)
										{
											<tr>
												<td>@detalle.CantidadProducto</td>
												<td>@BuscarProducto(detalle.ProductoId)</td>
												<td>@BuscarUnidadMedida(detalle.UnidadMedidaId)</td>
												<td>@detalle.CantidadUnidadProducto</td>
												<td>@detalle.CostoTotal.ToString("N2")</td>
												<td>@detalle.CostoUnidad.ToString("N2")</td>
												<td>@detalle.Itbis.ToString("N2")</td>
												<td>@detalle.CostoTotalNeto.ToString("N2")</td>
												<td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
											</tr>
										}
									</tbody>
								</table>
								<p><strong>Total de Productos: </strong>@compra.ComprasDetalle.Count</p>
							}
						</section>
					</div>
				</fieldset>
				<div class="row">
					<div class="col-md-6">
						<div class="col-4 mb-3">
							<label class="form-label" for="monto"><strong>Monto Pagado</strong></label>
							<div class="d-flex align-items-center">
								<InputNumber id="monto" class="form-control me-2" @bind-Value="compra.MontoPagado" readonly></InputNumber>
								<img class="miImagen me-2" src="/Imagenes/pago-en-efectivo.png" alt="imagen-tarjeta-visa" />
							</div>
						</div>
						<div class="col-4 mb-3">
							<label class="form-label" for="monto"><strong>Monto Modificación</strong></label>
							<div class="d-flex align-items-center">
								<InputNumber id="monto" class="form-control me-2" @bind-Value="dinero"></InputNumber>
								<img class="miImagen me-2" src="/Imagenes/dinero.png" alt="imagen-tarjeta-visa" />
							</div>
						</div>
						<div class="col-4 mb-3">
							<label class="form-label" for="devolucion"><strong>Devolución</strong></label>
							<div class="d-flex align-items-center">
								<InputNumber id="devolucion" class="form-control me-2" @bind-Value="compra.Devuelta" readonly />
								<img class="miImagen me-2" src="/Imagenes/devolucion-de-dinero.png" alt="imagen-tarjeta-visa" />
							</div>
						</div>
						<div class="col-4 mb-3">
							<label class="form-label" for="debe"><strong>Debe</strong></label>
							<div class="d-flex align-items-center">
								<InputNumber id="debe" class="form-control me-2" @bind-Value="compra.Deuda" readonly />
								<img class="miImagen me-2" src="/Imagenes/doument.png" alt="imagen-tarjeta-visa" />
							</div>
						</div>

						<div class="col-auto d-flex align-items-end">
							<button type="button" class="btn btn-outline-success" @onclick="CalcularPago"><i class="bi bi-check-lg" /> Verificar</button>
						</div>
					</div>
					<div class="col-md-6">
						<div class="card">
							<div class="card-body">
								<div class="border border-primary rounded p-2 mb-3">
									<h3 class="text-center mb-0"><strong>Totales</strong></h3>
								</div>
								<div class="row">
									<!-- Total Antes -->
									<div class="col-6 border-end border-secondary">
										<div class="border border-secondary rounded p-3">
											<h4 class="text-center mb-3"><strong>Total Antes</strong></h4>
											<!-- Subtotal -->
											<div class="row mb-3 justify-content-center">
												<div class="col-10">
													<label class="form-label text-center"><strong>Subtotal</strong></label>
													<div class="input-group">
														<span class="input-group-text">$</span>
														<span id="subtotalAntes" class="form-control">@compra.SubTotal.ToString("N2")</span>
													</div>
												</div>
											</div>
											<!-- Total ITBIS -->
											<div class="row mb-3 justify-content-center">
												<div class="col-10">
													<label class="form-label"><strong>Total ITBIS</strong></label>
													<div class="input-group">
														<span class="input-group-text">$</span>
														<span id="totalItbisAntes" class="form-control">@compra.TotalItbis.ToString("N2")</span>
													</div>
												</div>
											</div>
											<!-- Total -->
											<div class="row mb-3 justify-content-center">
												<div class="col-10">
													<label class="form-label"><strong>Total</strong></label>
													<div class="input-group">
														<span class="input-group-text">$</span>
														<span id="totalAntes" class="form-control">@compra.TotalNeto.ToString("N2")</span>
													</div>
												</div>
											</div>
										</div>
									</div>
									<!-- Total Después -->
									<div class="col-6">
										<div class="border border-secondary rounded p-3">
											<h4 class="text-center mb-3"><strong>Total Ahora</strong></h4>
											<!-- Subtotal -->
											<div class="row mb-3 justify-content-center">
												<div class="col-10">
													<label class="form-label text-center"><strong>Subtotal</strong></label>
													<div class="input-group">
														<span class="input-group-text">$</span>
														<span id="subtotalDespues" class="form-control">@subTotalAhora.ToString("N2")</span>
													</div>
												</div>
											</div>
											<!-- Total ITBIS -->
											<div class="row mb-3 justify-content-center">
												<div class="col-10">
													<label class="form-label"><strong>Total ITBIS</strong></label>
													<div class="input-group">
														<span class="input-group-text">$</span>
														<span id="totalItbisDespues" class="form-control">@totalItbisAhora.ToString("N2")</span>
													</div>
												</div>
											</div>
											<!-- Total -->
											<div class="row mb-3 justify-content-center">
												<div class="col-10">
													<label class="form-label"><strong>Total</strong></label>
													<div class="input-group">
														<span class="input-group-text">$</span>
														<span id="totalDespues" class="form-control">@totalAhora.ToString("N2")</span>
													</div>
												</div>
											</div>
										</div>
									</div>
									<!-- Total General -->
									<div class="col-12 mt-3">
										<div class="border border-secondary rounded p-3">
											<h4 class="text-center mb-3"><strong>Total General</strong></h4>
											<div class="row mb-3 justify-content-center">
												<div class="col-8">
													<div class="input-group">
														<span class="input-group-text">$</span>
														<span id="totalDespues" class="form-control">@totalGeneral.ToString("N2")</span>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Modificar</button>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	public int compraId { get; set; }
	public Proveedores proveedor { get; set; } = new Proveedores();
	public Compras compra { get; set; } = new Compras();
	public Capital capital { get; set; } = new Capital();
	public Banco banco { get; set; } = new Banco();
	public CuentasPorPagar cuentasPorPagar { get; set; } = new CuentasPorPagar();

	public List<Proveedores> proveedores = new List<Proveedores>();
	public List<Productos> productos = new List<Productos>();
	public List<UnidadesMedida> unidadesMedidas = new List<UnidadesMedida>();
	public List<MetodosPago> metodosPagos = new List<MetodosPago>();
	public List<TiposContribuyente> tiposContribuyente = new List<TiposContribuyente>();

	public int cantidad { get; set; }
	public int producto { get; set; }
	public int unidadesMedida { get; set; }
	public int unidades { get; set; }
	public decimal precio { get; set; }
	public decimal costoTotal { get; set; }

	//modificacion
	public decimal dinero { get; set; }
	public decimal devolucion { get; set; }
	public decimal comparacionTotal { get; set; }
	public decimal subTotalAhora { get; set; }
	public decimal totalItbisAhora { get; set; }
	public decimal totalAhora { get; set; }
	public decimal totalGeneral { get; set; } = 0;


	public string contribuyente { get; set; }
	public string rnc { get; set; }
	public string direccion { get; set; }
	public string cuenta { get; set; }
	public string bancoProveedor { get; set; }


	// public string mensajeNombre { get; set; } = string.Empty;
	// public string mensajeEmail { get; set; } = string.Empty;
	// public string mensajeRNC { get; set; } = string.Empty;
	// public string otro { get; set; } = string.Empty;


	//eliminar mas tarde
	public string usuario { get; set; }
	public string numeroTarjeta { get; set; }
	public DateTime fechaVencimiento { get; set; } = DateTime.Today;
	public int codigoSeguridad { get; set; }


	//eliminar mas tarde
	public string mensaje { get; set; } = string.Empty;
	public string mensajeValidacionTarjeta { get; set; }
	public string mensajeErrorTarjeta { get; set; }

	public bool mostrarInfo { get; set; } = true;


	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		proveedores = await proveedorService.Listar(p => p.Eliminado == false);
		productos = await productosService.Listar(p => p.Eliminado == false);
		unidadesMedidas = await unidadesMedidaService.Listar(um => um.UnidadMedidaId > 0);
		metodosPagos = await metodosPagoService.Listar(um => um.MetodoPagoId > 0);
		capital = await capitalService.BuscarId(1);
		banco = await bancoService.BuscarId(1);
		tiposContribuyente = await tiposContribuyenteService.Listar(tc => tc.TipoContribuyenteId > 0);

		///compra
		compra = await comprasService.BuscarId(compraId);

		comparacionTotal = compra.TotalNeto;

		subTotalAhora = compra.ComprasDetalle.Sum(d => d.CostoTotalNeto);
		totalItbisAhora = compra.ComprasDetalle.Sum(d => d.Itbis);
		totalAhora = subTotalAhora + totalItbisAhora;

		//totalgeneral
		totalGeneral = totalAhora;
	}

	public async Task Crear()
	{
		if (compra.ComprasDetalle.Count == 0)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al crear",
					Detail = "Debe ingresar al menos un detalle",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return;
		}

		if (String.IsNullOrEmpty(compra.Nota))
			compra.Nota = "----";


		//quitar para probar algo
		if (compra.Estado == "Deuda")
		{
			cuentasPorPagar = new CuentasPorPagar
				{
					CompraId = compra.CompraId,
					DeudaInicial = compra.Deuda,
					DeudaRestante = compra.Deuda,
					Estado = "Pendiente"
				};

			compra.CuentaPorPagar = cuentasPorPagar;
		}

		ActualizarDatosDeCompra();

		var response = await comprasService.Crear(compra);
		if (response)
		{
			await Pagar();
			await SumarExistenciaProducto();
			await Task.Delay(3000);
			Volver();
		}
		else
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al crear",
					Detail = "No se pudo realizar la compra",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}
	}

	public async Task Pagar()
	{
		if (compra.Estado == "Pagada")
		{
			await capitalService.Modificar(capital);

			var MensajeEfectivo = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Compra realizada con éxito",
					Detail = $"Pago realizado con éxito $RD{totalGeneral.ToString("N2")}",
					Duration = 5_000
				};
			notificationService.Notify(MensajeEfectivo);

			//Buscar cuenta por pagar y pagarla
			//await cuentasPorPagarService.BuscarCompra(compra.CompraId);
			// if(response)
			// {
			///	cuentasPorPagar.Estado = Pagada;
			///	cuentasPorPagar.DeudaRestante = 0;
			//	
			// }
		}
		else
		{
			await capitalService.Modificar(capital);

			var MensajeEfectivo = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Compra realizada con éxito",
					Detail = $"Debe $RD{compra.Deuda.ToString("N2")}",
					Duration = 5_000
				};
			notificationService.Notify(MensajeEfectivo);

			//Buscar cuenta por pagar y actualizarla
			//await cuentasPorPagarService.BuscarCompra(compra.CompraId);
			// if(response)
			// {
			///	cuentasPorPagar.DeudaInicial = totalGeneral;
			//	if(comparacionTotal > totalGeneral)
			//	{
			//		cuentasPorPagar.DeudaRestante -= totalAhora - comparacionTotal;
			//	}
			// }
			// cuentasPorPagar = new CuentasPorPagar
			// 	{
			// 		CompraId = compra.CompraId,
			// 		DeudaInicial = compra.Deuda,
			// 		DeudaRestante = compra.Deuda,
			// 		Estado = "Pendiente"
			// 	};

			// compra.CuentaPorPagar = cuentasPorPagar;
		}
	}

	public async Task SumarExistenciaProducto()
	{
		foreach (var product in compra.ComprasDetalle)
		{
			var buscarProducto = productos.FirstOrDefault(p => p.ProductoId == product.ProductoId);
			buscarProducto.Existencia += product.CantidadProducto;

			await productosService.Guardar(buscarProducto);
		}
	}

	public async Task ActualizarExistenciaProducto(Productos producto)
	{
		await productosService.Guardar(producto);
	}

	public void CalcularPago()
	{
		if (capital.Efectivo < compra.MontoPagado)///si no hay suficiente efectivo
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al pagar con efectivo",
					Detail = "El dinero no es suficiente para realizar el pago",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return;
		}

		if (dinero + compra.MontoPagado >= totalGeneral)///si el monto es mayor que el total
		{
			var cobro = totalGeneral - compra.MontoPagado;
			capital.Efectivo -= cobro;
			compra.Devuelta = Math.Round(dinero - cobro, 2);
			compra.Deuda = 0;
			compra.Estado = "Pagada";
		}
		else ///si el monto es menor que el total
		{
			var montoFaltante = totalGeneral - dinero;
			capital.Efectivo -= dinero;
			compra.Devuelta = 0;
			compra.Deuda = montoFaltante - compra.MontoPagado;
			compra.Estado = "Deuda";
		}
	}

	public async Task AgregarDetalle()
	{
		if (await ValidarDetalle())
		{

			var costoUnidad = costoTotal / unidades;
			var costo = costoTotal * cantidad;
			var itbis = (decimal)((double)costo * 0.18);

			var nuevoDetalle = new ComprasDetalle
				{
					ProductoId = producto,
					CantidadProducto = cantidad,
					UnidadMedidaId = unidadesMedida,
					CantidadUnidadProducto = unidades,
					CostoTotal = costo,
					CostoUnidad = costoUnidad,
					Itbis = itbis,
					CostoTotalNeto = costo + itbis
				};

			compra.ComprasDetalle.Add(nuevoDetalle);

			subTotalAhora += costo + itbis;
			totalItbisAhora += itbis;
			totalAhora = subTotalAhora + totalItbisAhora;
			totalGeneral = totalAhora;

			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Éxito al agregar detalle",
					Detail = "El detalle se agregó correctamente",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			if (compra.MetodoPagoId != 3 && compra.TotalNeto > 20000 && mostrarInfo)
			{
				var MensajeInfo = new NotificationMessage
					{
						Severity = NotificationSeverity.Warning,
						Summary = "Monto a pagar excede los $20,000.00",
						Detail = "Se recomienda realizar la compra a través de transferencia",
						Duration = 10_000
					};
				notificationService.Notify(MensajeInfo);

				mostrarInfo = false;
			}

			await LimpiarPantalla();
		}
	}

	public async Task<bool> ValidarDetalle()
	{
		foreach (var productoid in compra.ComprasDetalle)
		{
			if (productoid.ProductoId == producto)
			{
				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al agregar detalle",
						Detail = "Este producto ya existe en el detalle",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);
				return false;
			}
		}

		if (producto <= 0)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "Debe elegir un producto",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		if (unidadesMedida <= 0)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "Debe elegir una unidad de medida",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		if (unidades <= 0 || unidades > 12)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "Las unidades deben ser mayor a 0 y menor que 12",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		if (costoTotal <= 0)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "Debe ingresar el costo del producto",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		if (cantidad <= 0 || cantidad > 1000)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "La cantidad debe ser mayor a 0 y menor que 1000",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			return false;
		}

		return true;
	}

	public void ActualizarDatosDeCompra()
	{
		if (compra.Estado == "Pagada")
			compra.MontoPagado = totalGeneral;
		else
			compra.MontoPagado = dinero;

		compra.SubTotal = subTotalAhora;
		compra.TotalItbis = totalItbisAhora;
		compra.TotalNeto = totalAhora;
	}

	private void ActualizarDatosProveedor(int proveedorId)
	{
		var proveedorSeleccionado = proveedores.FirstOrDefault(p => p.ProveedorId == proveedorId);
		if (proveedorSeleccionado != null)
		{
			direccion = proveedorSeleccionado.Ciudad + ", " + proveedorSeleccionado.Direccion;
			rnc = proveedorSeleccionado.RNC;
			bancoProveedor = proveedorSeleccionado.Banco;
			cuenta = proveedorSeleccionado.NumeroCuenta;

			var contribuyenteId = tiposContribuyente
			.FirstOrDefault(tc => tc.TipoContribuyenteId == proveedorSeleccionado.TipoContribuyenteId);

			contribuyente = contribuyenteId.Descripcion;
		}
		else
		{
			// Limpiar los campos si no se selecciona un proveedor válido
			direccion = string.Empty;
			contribuyente = string.Empty;
			rnc = string.Empty;
		}
	}

	bool unidadesDisabled = true;

	void VerificarUnidades(ChangeEventArgs e)
	{
		var unidadesMedidaSeleccionada = (string)e.Value;

		unidadesDisabled = unidadesMedidaSeleccionada == "2" || unidadesMedidaSeleccionada == "0";

		if (unidadesMedidaSeleccionada == "2")
			unidades = 1;
		else
			unidades = 0;
	}

	Dictionary<string, object> UnidadesAttributes => new Dictionary<string, object>
	{
		{ "class", "form-control" },
		{ "bind-Value", "@unidades" },
		{ "disabled", unidadesDisabled }
	};

	public string BuscarProducto(int id)
	{
		var valor = productos.FirstOrDefault(p => p.ProductoId == id);

		return valor.Nombre;
	}

	public string BuscarUnidadMedida(int id)
	{
		var valor = unidadesMedidas.FirstOrDefault(u => u.UnidadMedidaId == id);

		return valor.UnidadMedida;
	}

	public async Task EliminarDetalle(ComprasDetalle detalle)
	{
		subTotalAhora -= detalle.CostoTotalNeto;
		totalItbisAhora -= detalle.Itbis;
		totalAhora -= detalle.CostoTotalNeto + detalle.Itbis;
		totalGeneral = totalAhora;
		compra.ComprasDetalle.Remove(detalle);

		var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Éxito al eliminar detalle",
				Detail = "El detalle se eliminó con éxito",
				Duration = 5_000
			};
		notificationService.Notify(Mensaje);
	}

	public async Task LimpiarPantalla()
	{
		cantidad = 0;
		producto = 0;
		unidadesMedida = 0;
		unidades = 0;
		costoTotal = 0;
		StateHasChanged();
	}

	void Volver()
	{
		navigation.NavigateTo("/Compras");
	}
}