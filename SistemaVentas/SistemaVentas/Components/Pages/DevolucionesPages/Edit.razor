@page "/EditDevoluciones"
@page "/EditDevoluciones/devolucionId={devolucionId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ProveedoresService proveedorService
@inject TiposContribuyenteService tipoContribuyenteService
@inject ContactosService contactoService
@inject VentasService ventasService
@inject DevolucionesService devolucionesService
@inject ClientesService clientesService
@inject ProductosService productosService
@inject NotificationService notificationService

@attribute [Authorize(Roles = "Admin,Client")]
<PageTitle>Modificar Devoluci&oacute;n</PageTitle>
<RadzenNotification />
<EditForm Model="devolucion" OnValidSubmit="Crear" FormName="ModificarDevoluciones">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3><strong>Modificar Devoluci&oacute;n</strong></h3>
			</div>
			@*Cuerpo*@
			<div class="card-body">
				<div class="row mb-3">
					<div class="col-4">
						@*Devolucion Id*@
						<label class="form-label" for="devolucion"><strong>Devoluci&oacute;nId</strong></label>
						<InputNumber id="devolucion" class="form-control" @bind-Value="devolucion.DevolucionId" readonly></InputNumber>
					</div>
					<div class="col-4">
						@*FechaCreacion*@
						<label class="form-label" for="fecha"><strong>Fecha De Devoluci&oacute;n</strong></label>
						<InputDate id="fecha" class="form-control" @bind-Value="devolucion.FechaDevolucion" readonly></InputDate>
					</div>
					<div class="col-4">
						@*Cliente*@
						<label class="form-label" for="cliente"><strong>Cliente</strong></label>
						<InputSelect id="cliente" class="form-select" @bind-Value="devolucion.ClienteId">
							<option value="">Elige una opci&oacute;n</option>
							@foreach (var cliente in clientes)
							{
								<option value="@cliente.ClienteId">@cliente.Nombre</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => devolucion.ClienteId)"></ValidationMessage>
					</div>
				</div>
				<div class="row mb-3">
					<div class="col-12">
						@*Nota*@
						<label class="form-label" for="nota"><strong>Nota</strong></label>
						<label>(Opcional)</label>
						<InputTextArea id="nota" class="form-control" @bind-Value="devolucion.Observacion" placeholder="Ingrese una nota"></InputTextArea>
						<ValidationMessage For="@(() => devolucion.Observacion)"></ValidationMessage>
					</div>
				</div>
				@*Devoluciones Detalles*@
				<fieldset class="border-primmary border border-2">
					@*Body*@
					<div class="card-body">
						<section class="row mb-4">
							<h3><strong>Detalles</strong></h3>
							<div class="row align-content-center">
								@*Productos*@
								<div class="col-3">
									<label class="form-label" for="producto"><strong>Producto</strong></label>
									<InputSelect id="producto" class="form-select" @bind-Value="productoDetalle">
										<option value="">Elige una opci&oacute;n</option>
										@foreach (var producto in productos)
										{
											<option value="@producto.ProductoId">@producto.Nombre</option>
										}
									</InputSelect>
								</div>
								@*Cantidad*@
								<div class="col-2">
									<label class="form-label" for="cantidad"><strong>Cantidad</strong></label>
									<InputNumber id="cantidad" class="form-control" @bind-Value="cantidad"></InputNumber>
								</div>
								@*Motivo*@
								<div class="col-4">
									<label class="form-label" for="motivo"><strong>Motivo</strong></label>
									<InputText id="motivo" class="form-control" @bind-Value="motivo" placeholder="Ingrese un mensaje breve..."></InputText>
								</div>
								@*Boton*@
								<div class="col-auto d-flex align-items-end">
									<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
								</div>
							</div>
						</section>
						<section>
							@if (devolucion.DevolucionesDetalle.Count > 0)
							{
								@*Table Detalles*@
								<table class="table table-bordered miTabla">
									<thead>
										<tr>
											<th>Cantidad</th>
											<th>Producto</th>
											<th>Motivo</th>
											<th></th>
										</tr>
									</thead>
									<tbody>
										@foreach (var detalle in devolucion.DevolucionesDetalle)
										{
											<tr>
												<td>@detalle.CantidadDevuelta</td>
												<td>@BuscarProducto(detalle.ProductoId)</td>
												<td>@detalle.Motivo</td>
												<td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
											</tr>
										}
									</tbody>
								</table>
								<p><strong>Total de Devoluciones: </strong>@devolucion.DevolucionesDetalle.Count</p>
							}
						</section>
					</div>
				</fieldset>
			</div>
			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Crear</button>
			</div>
		</div>
	</div>

	<!-- Modal -->
	<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h1 class="modal-title fs-5" id="exampleModalLabel"><strong>Datos sin guardar</strong></h1>
				</div>
				<div class="modal-body">
					¿Estás seguro de que quieres salir sin guardar?
					<em>Si deseas salir pulsa "Salir"</em>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CerrarModal">Cerrar</button>
					<button type="button" class="btn btn-primary" @onclick="VolverAtras">Salir</button>
				</div>
			</div>
		</div>
	</div>

	@if (mostrarModal)
	{
		<script>
			var myModal = new bootstrap.Modal(document.getElementById('exampleModal'));
			myModal.show();
		</script>
	}

</EditForm>

@code {
	[Parameter]
	public int devolucionId { get; set; }
	public Devoluciones devolucion { get; set; } = new Devoluciones();

	public List<Clientes> clientes = new List<Clientes>();
	public List<Productos> productos = new List<Productos>();

	public int productoDetalle { get; set; }
	public int cantidad { get; set; }
	public string motivo { get; set; }

	public int clienteLast { get; set; }
	public string observacionLast { get; set; }
	public bool mostrarModal { get; set; }
	public bool devolucionActualizada { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		// await Task.Delay(500);

		clientes = await clientesService.Listar(c => c.Eliminado == false);
		productos = await productosService.Listar(p => p.Eliminado == false);

		devolucion = await devolucionesService.BuscarId(devolucionId);

		clienteLast = devolucion.ClienteId;
		observacionLast = devolucion.Observacion;
	}

	public async Task Crear()
	{
		if (await ValidarDevolucion())
		{
			if (String.IsNullOrEmpty(devolucion.Observacion))
				devolucion.Observacion = "----";

			var response = await devolucionesService.Crear(devolucion);

			if (response)
			{
				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Success,
						Summary = "Éxito al crear",
						Detail = "La devolución se creó con éxito",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);

				await Task.Delay(3000);
				Volver();
			}
			else
			{
				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al crear",
						Detail = "La devolución no se pudo crear correctamente",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);
			}
		}
	}

	public async Task<bool> ValidarDevolucion()
	{
		if (devolucion.DevolucionesDetalle.Count == 0)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al crear",
					Detail = "Debe agregar por lo menos un detalle",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			return false;
		}

		return true;
	}

	public async Task AgregarDetalle()
	{
		if (!String.IsNullOrEmpty(motivo) && productoDetalle != 0 && cantidad != 0)
		{
			if (await ValidarDetalle())
			{
				// var nuevoDetalle = new DevolucionesDetalle
				// {
				// 	ProductoId = productoDetalle, CantidadDevuelta = cantidad, Motivo = motivo };
				// devolucion.DevolucionesDetalle.Add(nuevoDetalle);

				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Success,
						Summary = "Éxito al agregar detalle",
						Detail = "Devolución agregada al detalle correctamente",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);

				await LimpiarPantalla();
			}
		}
		else
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "No pueden haber campos vacíos",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
		}
	}

	public async Task<bool> ValidarDetalle()
	{
		foreach (var producto in devolucion.DevolucionesDetalle)
		{
			if (producto.ProductoId == productoDetalle)
			{
				var Mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Error al agregar detalle",
						Detail = "Este producto ya existe ne el detalle",
						Duration = 5_000
					};
				notificationService.Notify(Mensaje);

				return false;
			}
		}

		if (cantidad <= 0 || cantidad > 1000)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "La cantidad debe ser mayor a 0 y menor que 1000",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			return false;
		}

		if (motivo.Length > 40)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al agregar detalle",
					Detail = "La longitud del campo motivo no puede ser mayor a 40 caracteres",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			return false;
		}
		return true;
	}

	public async Task EliminarDetalle(DevolucionesDetalle detalle)
	{
		devolucion.DevolucionesDetalle.Remove(detalle);

		var Mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Éxito al eleminar detalle",
				Detail = "Detalle eliminado  con éxito",
				Duration = 5_000
			};
		notificationService.Notify(Mensaje);
	}

	public string BuscarProducto(int id)
	{
		var valor = productos.FirstOrDefault(p => p.ProductoId == id);

		return valor.Nombre;
	}

	public async Task LimpiarPantalla()
	{
		StateHasChanged();
	}

	void Volver()
	{
		if (devolucion.ClienteId != clienteLast || devolucion.Observacion != observacionLast
			|| productoDetalle != 0 || cantidad != 0 || motivo != null || devolucionActualizada)
		{
			mostrarModal = true; // Mostrar el modal si la condición se cumple
		}
		else
			VolverAtras();
	}

	public void CerrarModal()
	{
		mostrarModal = false;
	}

	public void VolverAtras()
	{
		navigation.NavigateTo("/Devoluciones");
	}
}
