@page "/DeleteCategorias"
@page "/DeleteCategorias/categoriaId={categoriaId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject CategoriasService categoriasService
@inject NotificationService notificationService

@attribute [Authorize(Roles = "Admin")]
<PageTitle>Eliminar Categoria</PageTitle>
<RadzenNotification  />
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Detalles de Categoria</strong></h3>
		</div>
		@*Cuerpo*@
		<div class="card-body">
			<div class="row">
				<div class="col-8">
					<div class="col-md-11">
						<h3 class="text-center"><strong>Datos de la Categoria</strong></h3>
						<div class="border-primmary border border-2 borde">
							<div class="card-body">
								<div class="row">
									@*Imagen*@
									<div class="col-2">
										<div class="text-center">
											<img src="Imagenes/canasta.png" alt="Imagen" class="img-fluid img-thumbnail" style="width: 100px; height: auto;">
										</div>
									</div>
									@*Datos del cliente*@
									<div class="col-9">
										<ul class="list-unstyled" style="margin-top: 20px; margin-bottom: 20px;">
											<li><strong>CategoriaId:</strong> @categoria.CategoriaId</li>
											<li><strong>FechaCreacion:</strong> @categoria.FechaCreacion.ToShortDateString()</li>
											<li><strong>Descripci&oacute;n:</strong> @categoria.Descripcion</li>
										</ul>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		@*Footer*@
		<div class="card-footer d-flex justify-content-center">
			<div class="px-2">
				<button type="button" class="btn btn-outline-dark" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Cancelar</button>
			</div>
			<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="bi bi-trash3-fill" /> Eliminar</button>
		</div>
	</div>
</div>
@mensaje

@code {
	[Parameter]
	public int categoriaId { get; set; }
	public Categorias categoria { get; set; } = new Categorias();
	public string mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		categoria = await categoriasService.BuscarId(categoriaId);
	}

	public async Task Eliminar()
	{
		categoria.Eliminado = true;

		var response = await categoriasService.Guardar(categoria);

		if (response)
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Éxito al eliminar",
					Detail = "Se eliminó la categoria con éxito",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);

			await Task.Delay(3000);
			Volver();
		}
		else
		{
			var Mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error al eliminar",
					Detail = "No se pudo eliminar la categoria correctamente",
					Duration = 5_000
				};
			notificationService.Notify(Mensaje);
			await Task.Delay(3000);
			Volver();
		}
	}

	void Volver()
	{
		navigation.NavigateTo("/Categorias");
	}
}