@page "/DeleteCategorias"
@page "/DeleteCategorias/categoriaId={categoriaId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject CategoriasService categoriasService
@inject NotificationService notificationService

<PageTitle>Eliminar Categoria</PageTitle>
<RadzenNotification/>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Eliminar Categoria</strong></h3>
		</div>
		@*Cuerpo*@
		<div class="card-body">
			<h3><strong>¿Est&aacute;s seguro de que quieres eliminar esta categoria?</strong></h3>
			@*Datos*@
			<ul>
				<li><strong>CategoriaId:</strong> @categoria.CategoriaId</li>
				<li><strong>Fecha Creaci&oacute;n:</strong> @categoria.FechaCreacion.ToShortDateString()</li>
				<li><strong>Descripci&oacute;n:</strong> @categoria.Descripcion</li>
			</ul>
		</div>
		@*Footer*@
		<div class="card-footer d-flex justify-content-center">
			<div class="px-2">
				<button type="button" class="btn btn-outline-dark" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Cancelar</button>
			</div>
			<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="bi bi-trash3-fill" /> Eliminar</button>
		</div>
	</div>
</div>
@mensaje

@code {
	[Parameter]
	public int categoriaId { get; set; }
	public Categorias categoria { get; set; } = new Categorias();
	public string mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		categoria = (await categoriasService.BuscarId(categoriaId))!;
	}

	public async Task Eliminar()
	{
		// var Mensaje = new NotificationMessage
		// 	{
		// 		Severity = NotificationSeverity.Error,
		// 		Summary = "Error al guardar",
		// 		Detail = "Ha ocurrido un error",
		// 		Duration = 5_000
		// 	};
		// notificationService.Notify(Mensaje);

		// var Otro = new NotificationMessage
		// 	{
		// 		Severity = NotificationSeverity.Success,
		// 		Summary = "Guardo",
		// 		Detail = "Guardo correctamente",
		// 		Duration = 5_000
		// 	};
		// notificationService.Notify(Otro);

		categoria.Eliminado = true;
		await categoriasService.Guardar(categoria);
		Volver();
	}

	void Volver()
	{
		navigation.NavigateTo("/Categorias");
	}
}